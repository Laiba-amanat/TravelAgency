import React from 'react';
import { Size, Theme, Variant } from '../../types';
import { Props } from '../../core';
export interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {
    size?: Size;
    theme?: Theme;
    variant?: Variant;
    dark?: boolean;
    leadingIcon?: React.ReactNode;
    trailingIcon?: React.ReactNode;
    inputRef?: React.Ref<HTMLInputElement>;
}
export declare const Input: (<TTag extends React.ElementType<any> = "input">(props: Pick<Props<TTag, "1D45E01E-AF44-47C4-988A-19A94EBAF55C">, "children" | "as" | Exclude<Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "className" | "children" | "as">, "size"> | Exclude<keyof ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
    className?: any;
} ? {
    className?: string | undefined;
} : {}), "size">> & InputProps, ref: React.Ref<TTag>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>) & {
    displayName: string;
};
