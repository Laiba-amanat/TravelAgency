import React from 'react';
import { Props } from '../../core';
import { GroupBorderOption, Size, Theme, Variant } from '../../types';
export interface InputGroupProps {
    size?: Size;
    theme?: Theme;
    variant?: Variant;
    dark?: boolean;
    borderOption?: GroupBorderOption;
}
declare const InputGroup: (<TTag extends React.ElementType<any> = "div">(props: Pick<TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never, Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "as" | "children" | "className">> & {
    as?: TTag | undefined;
    children?: React.ReactNode;
} & ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
    className?: any;
} ? {
    className?: string | undefined;
} : {}) & InputGroupProps, ref: React.Ref<TTag>) => JSX.Element) & {
    displayName: string;
};
export { InputGroup };
