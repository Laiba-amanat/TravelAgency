import React from 'react';
import { Size, Theme, Variant } from '../../types';
import { Props } from '../../core';
import * as RadixSelect from '@radix-ui/react-select';
export interface SelectRootProps extends RadixSelect.SelectProps {
    size?: Size;
    theme?: Theme;
    dark?: boolean;
}
export interface SelectTriggerProps extends RadixSelect.SelectValueProps {
    leadingIcon?: React.ReactNode;
    trailingIcon?: React.ReactNode;
    variant?: Variant;
}
export interface SelectPanelProps extends RadixSelect.SelectPortalProps {
    children: React.ReactNode;
}
export interface SelectItemProps extends RadixSelect.SelectItemProps {
    theme?: Theme;
    leadingIcon?: React.ReactNode;
    trailingIcon?: React.ReactNode;
    textClassName?: string;
}
export declare const Select: ((props: SelectRootProps) => JSX.Element) & {
    Trigger: (<TTag extends React.ElementType<any> = "button">(props: Pick<TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never, Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "className" | "children" | "as">> & {
        as?: TTag | undefined;
        children?: React.ReactNode;
    } & ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & SelectTriggerProps, ref: React.Ref<TTag>) => JSX.Element) & {
        displayName: string;
    };
    Panel: (<TTag_1 extends React.ElementType<any> = "div">(props: Pick<TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never, Exclude<keyof (TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never), "className" | "children" | "as">> & {
        as?: TTag_1 | undefined;
        children?: React.ReactNode;
    } & ((TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & SelectPanelProps, ref: React.Ref<TTag_1>) => JSX.Element) & {
        displayName: string;
    };
    Item: (<TTag_2 extends React.ElementType<any> = "button">(props: Pick<TTag_2 extends React.ElementType<any> ? React.ComponentProps<TTag_2> : never, Exclude<keyof (TTag_2 extends React.ElementType<any> ? React.ComponentProps<TTag_2> : never), "className" | "children" | "as">> & {
        as?: TTag_2 | undefined;
        children?: React.ReactNode;
    } & ((TTag_2 extends React.ElementType<any> ? React.ComponentProps<TTag_2> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & SelectItemProps, ref: React.Ref<TTag_2>) => JSX.Element) & {
        displayName: string;
    };
};
