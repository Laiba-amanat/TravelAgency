import React from 'react';
import { Props } from '../../core';
import { Size, Theme } from '../../types';
export interface CardProps {
    size?: Size;
    theme?: Theme;
    dark?: boolean;
}
export interface CardContentProps {
}
export declare const Card: (<TTag extends React.ElementType<any> = "div">(props: Pick<TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never, Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "as" | "children" | "className">> & {
    as?: TTag | undefined;
    children?: React.ReactNode;
} & ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
    className?: any;
} ? {
    className?: string | undefined;
} : {}) & CardProps, ref: React.Ref<TTag>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>) & {
    displayName: string;
} & {
    Content: (<TTag_1 extends React.ElementType<any> = "div">(props: Pick<TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never, Exclude<keyof (TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never), "as" | "children" | "className">> & {
        as?: TTag_1 | undefined;
        children?: React.ReactNode;
    } & ((TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & CardContentProps, ref: React.Ref<TTag_1>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>) & {
        displayName: string;
    };
};
