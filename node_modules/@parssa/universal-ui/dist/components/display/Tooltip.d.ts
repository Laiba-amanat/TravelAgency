import React from 'react';
import * as RadixTooltip from '@radix-ui/react-tooltip';
import { Props } from '../../core';
import { Size, Theme } from '../../types';
export interface TooltipProps extends RadixTooltip.TooltipProps {
}
export interface TooltipTriggerProps extends RadixTooltip.TooltipTriggerProps {
}
export interface TooltipContentProps extends RadixTooltip.TooltipContentProps {
    theme?: Theme;
    dark?: boolean;
    size?: Size;
    arrowClassName?: string;
    container?: HTMLElement | null | undefined;
}
export declare const Tooltip: (({ delayDuration, ...rest }: TooltipProps) => JSX.Element) & {
    Root: ({ delayDuration, ...rest }: TooltipProps) => JSX.Element;
    Trigger: (<TTag extends React.ElementType<any> = "span">(props: Pick<TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never, Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "children" | "className" | "as">> & {
        as?: TTag | undefined;
        children?: React.ReactNode;
    } & ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & TooltipProps, ref: React.Ref<TTag>) => JSX.Element) & {
        displayName: string;
    };
    Content: (props: TooltipContentProps) => JSX.Element;
};
