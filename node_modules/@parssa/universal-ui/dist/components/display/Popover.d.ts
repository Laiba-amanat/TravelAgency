import React from 'react';
import * as RadixPopover from '@radix-ui/react-popover';
import { Props } from '../../core';
import { Size, Theme } from '../../types';
export interface PopoverProps extends RadixPopover.PopoverProps {
}
export interface PopoverTriggerProps extends RadixPopover.PopoverTriggerProps {
}
export interface PopoverContentProps extends RadixPopover.PopoverContentProps {
    theme?: Theme;
    dark?: boolean;
    size?: Size;
    arrowClassName?: string;
    container?: HTMLElement | null | undefined;
}
export declare const Popover: (({ ...rest }: PopoverProps) => JSX.Element) & {
    Root: ({ ...rest }: PopoverProps) => JSX.Element;
    Trigger: (<TTag extends React.ElementType<any> = "div">(props: Pick<TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never, Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "children" | "className" | "as">> & {
        as?: TTag | undefined;
        children?: React.ReactNode;
    } & ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & PopoverProps, ref: React.Ref<TTag>) => JSX.Element) & {
        displayName: string;
    };
    Content: (props: PopoverContentProps) => JSX.Element;
};
