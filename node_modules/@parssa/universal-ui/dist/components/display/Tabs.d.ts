import React from 'react';
import * as RadixTabs from '@radix-ui/react-tabs';
import { Props } from '../../core';
export interface TabsProps extends RadixTabs.TabsProps {
}
export interface TabsListProps extends RadixTabs.TabsListProps {
}
export interface TabsTriggerProps extends RadixTabs.TabsTriggerProps {
}
export interface TabsContentProps extends RadixTabs.TabsContentProps {
}
export declare const Tabs: (({ ...rest }: TabsProps) => JSX.Element) & {
    Root: ({ ...rest }: TabsProps) => JSX.Element;
    List: (<TTag extends React.ElementType<any> = "div">(props: Pick<TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never, Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "className" | "children" | "as">> & {
        as?: TTag | undefined;
        children?: React.ReactNode;
    } & ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & TabsProps, ref: React.Ref<TTag>) => JSX.Element) & {
        displayName: string;
    };
    Trigger: (<TTag_1 extends React.ElementType<any> = "button">(props: Pick<TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never, Exclude<keyof (TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never), "className" | "children" | "as">> & {
        as?: TTag_1 | undefined;
        children?: React.ReactNode;
    } & ((TTag_1 extends React.ElementType<any> ? React.ComponentProps<TTag_1> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & TabsTriggerProps, ref: React.Ref<TTag_1>) => JSX.Element) & {
        displayName: string;
    };
    Content: (<TTag_2 extends React.ElementType<any> = "div">(props: Pick<TTag_2 extends React.ElementType<any> ? React.ComponentProps<TTag_2> : never, Exclude<keyof (TTag_2 extends React.ElementType<any> ? React.ComponentProps<TTag_2> : never), "className" | "children" | "as">> & {
        as?: TTag_2 | undefined;
        children?: React.ReactNode;
    } & ((TTag_2 extends React.ElementType<any> ? React.ComponentProps<TTag_2> : never) extends {
        className?: any;
    } ? {
        className?: string | undefined;
    } : {}) & TabsContentProps, ref: React.Ref<TTag_2>) => JSX.Element) & {
        displayName: string;
    };
};
