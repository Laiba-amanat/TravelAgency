import React from 'react';
import { Size, TextStyleVariant, Theme } from '../../types';
import { Props } from '../../core';
export interface TextProps {
    size?: Size;
    theme?: Theme;
    variant?: TextStyleVariant;
    dark?: boolean;
}
export declare const Text: (<TTag extends React.ElementType<any> = "p">(props: Pick<TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never, Exclude<keyof (TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never), "as" | "children" | "className">> & {
    as?: TTag | undefined;
    children?: React.ReactNode;
} & ((TTag extends React.ElementType<any> ? React.ComponentProps<TTag> : never) extends {
    className?: any;
} ? {
    className?: string | undefined;
} : {}) & TextProps, ref: React.Ref<TTag>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, any> | null) | (new (props: any) => React.Component<any, any, any>)>) & {
    displayName: string;
};
