'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var RadixTooltip = require('@radix-ui/react-tooltip');
var tailwindMerge = require('tailwind-merge');
var RadixDialog = require('@radix-ui/react-dialog');
var RadixPopover = require('@radix-ui/react-popover');
var RadixTabs = require('@radix-ui/react-tabs');
var RadixCheckbox = require('@radix-ui/react-checkbox');
var RadixSelect = require('@radix-ui/react-select');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["as"];
function forwardRefWithAs(component) {
  var _component$displayNam;

  return Object.assign(React__default.forwardRef(component), {
    displayName: (_component$displayNam = component.displayName) != null ? _component$displayNam : component.name
  });
}
function render(_ref) {
  var props = _ref.props,
      defaultTag = _ref.defaultTag;

  var _props$as = props.as,
      Component = _props$as === void 0 ? defaultTag : _props$as,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

  return React__default.createElement(Component, rest);
}

var isSSR = !(typeof window !== 'undefined' && window.document && window.document.documentElement);

var unwrapConfigClasses = function unwrapConfigClasses(component, context, props) {
  var classes = context.components[component];

  if (typeof classes === 'string') {
    return classes;
  }

  if (typeof classes === 'function') {
    // @ts-ignore
    return classes(props);
  }

  return '';
};

var useMedia = function useMedia(queries, values, defaultValue) {
  // Array containing a media query list for each query
  var mediaQueryLists = isSSR ? [] : queries.map(function (q) {
    return window.matchMedia(q);
  }); // Function that gets value based on matching media query

  var getValue = function getValue() {
    // Get index of first media query that matches
    var index = mediaQueryLists.findIndex(function (mql) {
      return mql.matches;
    }); // Return related value or defaultValue if none

    return (values == null ? void 0 : values[index]) || defaultValue;
  }; // State and setter for matched value


  var _useState = React.useState(getValue),
      value = _useState[0],
      setValue = _useState[1];

  React.useEffect(function () {
    // Event listener callback
    // Note: By defining getValue outside of useEffect we ensure that it has ...
    // ... current values of hook args (as this hook callback is created once on mount).
    var handler = function handler() {
      return setValue(getValue);
    }; // Set a listener for each media query with above handler as callback.


    mediaQueryLists.forEach(function (mql) {
      return mql.addEventListener('change', handler);
    }); // Remove listeners on cleanup

    return function () {
      return mediaQueryLists.forEach(function (mql) {
        return mql.removeEventListener('change', handler);
      });
    };
  }, [] // Empty array ensures effect is only run on mount and unmount
  );
  return value;
};

var useClient = function useClient() {
  var _useState = React.useState(false),
      client = _useState[0],
      setClient = _useState[1];

  React.useEffect(function () {
    setClient(true);
  }, []);
  return client;
};

// import { useUniversalUIConfig } from './../config/UniversalUIConfigContext';

function usePrefersDarkMode() {
  return useMedia(['(prefers-color-scheme: dark)'], [true], false);
}

var useDarkMode = function useDarkMode() {
  var prefersDarkMode = usePrefersDarkMode();

  var _useState = React.useState(false),
      stored = _useState[0],
      setStored = _useState[1];

  var client = useClient();
  React.useEffect(function () {
    setStored(prefersDarkMode);
  }, [prefersDarkMode, client]);
  return [stored];
};

var _excluded$1 = ["theme", "size", "dark", "inverted"];
var DEFAULT_THEME_PROVIDER_TAG = 'div';
var ThemeProvider = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var _props$theme = props.theme,
      theme = _props$theme === void 0 ? 'neutral' : _props$theme,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      dark = props.dark,
      inverted = props.inverted,
      rest = _objectWithoutPropertiesLoose(props, _excluded$1);

  var _useDarkMode = useDarkMode(),
      enabled = _useDarkMode[0];

  var isRootEnabled = function isRootEnabled() {
    var _document$body$datase;

    if (!isSSR) return enabled;
    if (typeof window !== 'undefined' && typeof document !== 'undefined' && window && document && (_document$body$datase = document.body.dataset.theme) != null && _document$body$datase.includes('dark')) return true;
    return false;
  };

  var isDark = typeof dark !== 'undefined' ? dark : isRootEnabled();
  var isDarkWithInverted = typeof inverted !== 'undefined' ? !isDark : isDark;
  return render({
    props: _extends({
      'data-theme': theme,
      'data-dark': isDarkWithInverted,
      'data-size': size,
      ref: ref
    }, rest),
    defaultTag: DEFAULT_THEME_PROVIDER_TAG
  });
});

var UniversalUIConfigContext = /*#__PURE__*/React.createContext({
  components: {},
  ssr: false
});
var UniversalUIConfigProvider = function UniversalUIConfigProvider(_ref) {
  var _config$providers, _config$providers2;

  var children = _ref.children,
      config = _ref.config;

  var _useState = React.useState(!(config != null && config.ssr) ? config : {
    components: {}
  }),
      v = _useState[0],
      setV = _useState[1];

  React.useEffect(function () {
    setV(v);
  }, [config]);
  return React__default.createElement(UniversalUIConfigContext.Provider, {
    value: v != null ? v : {
      components: {}
    }
  }, React__default.createElement(ThemeProvider, Object.assign({}, config == null ? void 0 : (_config$providers = config.providers) == null ? void 0 : _config$providers.theme), React__default.createElement(RadixTooltip.Provider, Object.assign({}, config == null ? void 0 : (_config$providers2 = config.providers) == null ? void 0 : _config$providers2.tooltip), children)));
};
var useUniversalUIConfig = function useUniversalUIConfig() {
  return React.useContext( // @ts-ignore
  typeof React.createContext === 'function' ? UniversalUIConfigContext : {
    displayName: 'SSR_MODE'
  });
};

var useClassNames = function useClassNames(fn) {
  var classes = fn();
  return cx(classes);
};
var useMounted = function useMounted() {
  var _useState = React.useState(false),
      mounted = _useState[0],
      setMounted = _useState[1];

  React.useEffect(function () {
    setMounted(true);
  }, []);
  return mounted;
};
var SPACING_CLASSES = ['size-x', 'size-y', 'size-2x', 'size-2y', 'size-hx', 'size-hy', 'size-qx', 'size-qy', 'size-4x', 'size-4y'];
var twMerge = /*#__PURE__*/tailwindMerge.extendTailwindMerge({
  classGroups: {
    'font-size': [{
      text: ['size']
    }],
    'padding-left': [{
      pl: SPACING_CLASSES
    }],
    'padding-right': [{
      pr: SPACING_CLASSES
    }],
    pt: [{
      pt: SPACING_CLASSES
    }],
    pb: [{
      pb: SPACING_CLASSES
    }],
    px: [{
      px: SPACING_CLASSES
    }],
    py: [{
      py: SPACING_CLASSES
    }],
    pr: [{
      py: SPACING_CLASSES
    }],
    pl: [{
      py: SPACING_CLASSES
    }],
    padding: [{
      p: SPACING_CLASSES
    }],
    'margin-left': [{
      ml: SPACING_CLASSES
    }],
    'margin-right': [{
      mr: SPACING_CLASSES
    }],
    'margin-top': [{
      mt: SPACING_CLASSES
    }],
    'margin-bottom': [{
      mb: SPACING_CLASSES
    }],
    'margin-x': [{
      mx: SPACING_CLASSES
    }],
    'margin-y': [{
      my: SPACING_CLASSES
    }],
    margin: [{
      m: SPACING_CLASSES
    }],
    'text-color': [{
      text: ['theme-base', 'theme-inverted', 'theme-active']
    }],
    leading: [{
      leading: ['size']
    }]
  }
});
var cx = function cx(classes) {
  return twMerge(Array.from(classes).filter(Boolean).join(' ').replace(/\s+/g, ' ') // remove extra whitespace
  .trim());
};

var _excluded$2 = ["size", "theme", "dark", "className"],
    _excluded2 = ["className"];
var DEFAULT_CARD_TAG = 'div';
var CardRoot = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var size = props.size,
      theme = props.theme,
      dark = props.dark,
      className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded$2);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'border border-theme-base rounded-md shadow-sm bg-theme-pure group/card';
    var configClasses = unwrapConfigClasses('card', config, props);
    return [base, configClasses, className];
  });
  return render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames,
      'data-size': size,
      'data-theme': theme,
      'data-dark': dark,
      'data-uui': true
    }, rest),
    defaultTag: DEFAULT_CARD_TAG
  });
});
var CardContent = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded2);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'p-size-x';
    var configClasses = unwrapConfigClasses('card.content', config, props);
    return [base, configClasses, className];
  });
  return render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_CARD_TAG
  });
});
var Card = /*#__PURE__*/Object.assign(CardRoot, {
  Content: CardContent
});

var useBodyElement = function useBodyElement() {
  var _React$useState = React__default.useState(null),
      body = _React$useState[0],
      setBody = _React$useState[1];

  React__default.useEffect(function () {
    setBody(document.body);
  }, []);
  return body;
};

var _excluded$3 = ["className", "children", "open", "defaultOpen", "onOpenChange", "modal", "theme", "dark", "size", "container"],
    _excluded2$1 = ["className"],
    _excluded3 = ["className"],
    _excluded4 = ["className"];
var DialogRoot = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      children = props.children,
      open = props.open,
      defaultOpen = props.defaultOpen,
      onOpenChange = props.onOpenChange,
      modal = props.modal,
      theme = props.theme,
      dark = props.dark,
      size = props.size,
      container = props.container,
      rest = _objectWithoutPropertiesLoose(props, _excluded$3);

  var config = useUniversalUIConfig();
  var body = useBodyElement();
  var classNames = useClassNames(function () {
    var base = 'relative max-w-lg w-full transition-none shadow-md data-[state=open]:animate-fade-in';
    var configClasses = unwrapConfigClasses('dialog', config, props);
    return [base, configClasses, className];
  });
  var overlayClassNames = useClassNames(function () {
    var base = 'fixed  inset-0 bg-black/50';
    var configClasses = unwrapConfigClasses('dialog_overlay', config, props);
    return [base, configClasses];
  });
  var rootClassNames = useClassNames(function () {
    var base = 'fixed z-[51] inset-0 grid p-size-x place-items-center';
    var configClasses = unwrapConfigClasses('dialog_root', config, props);
    return [base, configClasses];
  });
  return React__default.createElement(RadixDialog.Root, {
    open: open,
    defaultOpen: defaultOpen,
    onOpenChange: onOpenChange,
    modal: modal
  }, React__default.createElement(RadixDialog.Portal, {
    container: container != null ? container : body
  }, React__default.createElement(ThemeProvider, {
    className: rootClassNames
  }, React__default.createElement(RadixDialog.Overlay, {
    className: overlayClassNames
  }), React__default.createElement(RadixDialog.Content, {
    asChild: true
  }, React__default.createElement(Card, Object.assign({}, rest, {
    className: classNames,
    ref: ref,
    theme: theme,
    size: size,
    dark: dark,
    "data-modal": modal
  }), children)))));
});
var DEFAULT_DIALOG_CONTENT_TAG = 'div';
var DialogContent = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded2$1);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'pl-size-x pr-size-x pt-size-x pb-size-x';
    var configClasses = unwrapConfigClasses('dialog.content', config, props);
    return [base, configClasses, className];
  });
  return render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_DIALOG_CONTENT_TAG
  });
});
var DEFAULT_DIALOG_TITLE_TAG = 'h3';
var DialogTitle = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded3);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'text-theme-base text-xl font-medium tracking-tight';
    var configClasses = unwrapConfigClasses('dialog.title', config, props);
    return [base, configClasses, className];
  });
  return React__default.createElement(RadixDialog.Title, {
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_DIALOG_TITLE_TAG
  }));
});
var DEFAULT_DIALOG_DESCRIPTION_TAG = 'p';
var DialogDescription = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded4);

  var classNames = useClassNames(function () {
    var base = 'text-theme-muted';
    return [base, className];
  });
  return React__default.createElement(RadixDialog.Description, {
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_DIALOG_DESCRIPTION_TAG
  }));
});
var Dialog = /*#__PURE__*/Object.assign(DialogRoot, {
  Root: DialogRoot,
  Content: DialogContent,
  Title: DialogTitle,
  Description: DialogDescription
});

var _excluded$4 = ["className"],
    _excluded2$2 = ["className", "sideOffset", "theme", "size", "dark", "arrowClassName", "container"];

var PopoverRoot = function PopoverRoot(_ref) {
  var rest = _extends({}, _ref);

  return React__default.createElement(RadixPopover.Root, Object.assign({}, rest));
};

var DEFAULT_POPOVER_TRIGGER_TAG = 'div';
var PopoverTrigger = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded$4);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'inline-block';
    var configClasses = unwrapConfigClasses('popover.trigger', config, props);
    return [base, configClasses, className];
  });
  return React__default.createElement(RadixPopover.Trigger, {
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_POPOVER_TRIGGER_TAG
  }));
});

var PopoverContent = function PopoverContent(props) {
  var className = props.className,
      _props$sideOffset = props.sideOffset,
      sideOffset = _props$sideOffset === void 0 ? 8 : _props$sideOffset,
      theme = props.theme,
      size = props.size,
      dark = props.dark,
      arrowClassName = props.arrowClassName,
      container = props.container,
      rest = _objectWithoutPropertiesLoose(props, _excluded2$2);

  var body = useBodyElement();
  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'bg-theme-pure border border-theme-muted rounded text-theme-base shadow-sm z-[51]';
    var sizeClasses = 'pl-size-x pr-size-x pb-size-x pt-size-x text-size';
    var animationClasses = 'origin-[var(--radix-popover-content-transform-origin)] motion-safe:animate-scale-in motion-reduce:animate-fade-in';
    var configClasses = unwrapConfigClasses('popover.content', config, props);
    return [base, sizeClasses, animationClasses, configClasses, className];
  });
  var arrowClassNames = useClassNames(function () {
    var base = 'fill-theme-muted';
    var configClasses = unwrapConfigClasses('popover.content_arrow', config, props);
    return [base, configClasses, arrowClassName];
  });
  return React__default.createElement(RadixPopover.Portal, {
    container: container != null ? container : body
  }, React__default.createElement(ThemeProvider, Object.assign({}, rest, {
    sideOffset: sideOffset,
    as: RadixPopover.Content,
    theme: theme,
    size: size,
    dark: dark,
    className: classNames
  }), props.children, !arrowClassNames.includes('fill-transparent') && React__default.createElement(RadixPopover.Arrow, {
    className: arrowClassNames
  })));
};

var Popover = /*#__PURE__*/Object.assign(PopoverRoot, {
  Root: PopoverRoot,
  Trigger: PopoverTrigger,
  Content: PopoverContent
});

var _excluded$5 = ["className"],
    _excluded2$3 = ["className", "value"],
    _excluded3$1 = ["className", "value"];

var TabsRoot = function TabsRoot(_ref) {
  var rest = _extends({}, _ref);

  return React__default.createElement(RadixTabs.Root, Object.assign({}, rest));
};

var DEFAULT_TABS_LIST_TAG = 'div';
var TabsList = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded$5);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'flex border-b border-theme-base';
    var configClasses = unwrapConfigClasses('tabs.list', config, props);
    return [base, configClasses, className];
  });
  return React__default.createElement(RadixTabs.List, {
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_TABS_LIST_TAG
  }));
});
var DEFAULT_TABS_TRIGGER_TAG = 'button';
var TabsTrigger = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      value = props.value,
      rest = _objectWithoutPropertiesLoose(props, _excluded2$3);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'inline-block px-size-x py-size-x text-size leading-size font-medium text-theme-muted group/tabs-trigger border-b-2 border-transparent';
    var activeClasses = 'data-[state=active]:border-current data-[state=active]:text-theme-active';
    var inactiveClasses = 'data-[state=inactive]:hover:text-theme-active';
    var configClasses = unwrapConfigClasses('tabs.trigger', config, props);
    return [base, activeClasses, inactiveClasses, configClasses, className];
  });
  return React__default.createElement(RadixTabs.Trigger, {
    value: value,
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_TABS_TRIGGER_TAG
  }));
});
var DEFAULT_TABS_CONTENT_TAG = 'div';
var TabsContent = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      value = props.value,
      rest = _objectWithoutPropertiesLoose(props, _excluded3$1);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'inline-block';
    var configClasses = unwrapConfigClasses('tabs.content', config, props);
    return [base, configClasses, className];
  });
  return React__default.createElement(RadixTabs.Content, {
    value: value,
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_TABS_CONTENT_TAG
  }));
});
var Tabs = /*#__PURE__*/Object.assign(TabsRoot, {
  Root: TabsRoot,
  List: TabsList,
  Trigger: TabsTrigger,
  Content: TabsContent
});

var _excluded$6 = ["size", "theme", "variant", "dark", "className"];
var DEFAULT_TEXT_TAG = 'p';
var Text = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var size = props.size,
      theme = props.theme,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'p' : _props$variant,
      dark = props.dark,
      className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded$6);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'text-theme-base';
    var styleVariants = {
      h1: "text-4xl   font-semibold tracking-tight",
      h2: "text-3xl   font-semibold tracking-tight",
      h3: "text-2xl   font-semibold tracking-tight",
      h4: "text-xl    font-medium   tracking-tight",
      h5: "text-base  font-semibold tracking-tight",
      h6: "text-sm    font-medium   tracking-normal ",
      p: " text-size  font-normal   tracking-normal leading-size",
      code: "font-mono border text-size bg-theme-pure border-theme-base px-1 py-0.5 rounded font-medium whitespace-nowrap leading-size",
      kbd: "\n        font-medium font-sans\n        text-size\n        bg-theme-base border-theme-base\n        border border-b-[2px]\n        inline-grid place-items-center\n        px-1 py-0.5\n        min-w-[1.5rem] min-h-[1.5rem]\n        w-fit\n        rounded\n        text-center leading-none"
    };
    var configClasses = unwrapConfigClasses('text', config, _extends({}, props, {
      variant: variant
    }));
    return [base, styleVariants[variant], configClasses, className];
  });
  var renderElement = React.useMemo(function () {
    if (props.as) return props.as;
    if (variant === 'p') return 'p';
    return variant || DEFAULT_TEXT_TAG;
  }, [props.as, variant]);
  return render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames,
      'data-size': size,
      'data-theme': theme,
      'data-dark': dark
    }, rest),
    defaultTag: renderElement
  });
});

var _excluded$7 = ["delayDuration"],
    _excluded2$4 = ["className"],
    _excluded3$2 = ["className", "sideOffset", "theme", "size", "dark", "arrowClassName", "container"];

var TooltipRoot = function TooltipRoot(_ref) {
  var _ref$delayDuration = _ref.delayDuration,
      delayDuration = _ref$delayDuration === void 0 ? 150 : _ref$delayDuration,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded$7);

  return React__default.createElement(RadixTooltip.Root, Object.assign({}, rest, {
    delayDuration: delayDuration
  }));
};

var DEFAULT_TOOLTIP_TRIGGER_TAG = 'span';
var TooltipTrigger = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded2$4);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'inline-block';
    var configClasses = unwrapConfigClasses('tooltip.trigger', config, props);
    return [base, configClasses, className];
  });
  return React__default.createElement(RadixTooltip.Trigger, {
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames
    }, rest),
    defaultTag: DEFAULT_TOOLTIP_TRIGGER_TAG
  }));
});

var TooltipContent = function TooltipContent(props) {
  var className = props.className,
      _props$sideOffset = props.sideOffset,
      sideOffset = _props$sideOffset === void 0 ? 8 : _props$sideOffset,
      theme = props.theme,
      size = props.size,
      dark = props.dark,
      arrowClassName = props.arrowClassName,
      container = props.container,
      rest = _objectWithoutPropertiesLoose(props, _excluded3$2);

  var body = useBodyElement();
  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'bg-theme-base border border-theme-muted rounded text-theme-base shadow-sm z-[51]';
    var sizeClasses = 'px-size-x py-size-qy text-size';
    var animationClasses = 'origin-[var(--radix-tooltip-content-transform-origin)] motion-safe:animate-scale-in motion-reduce:animate-fade-in';
    var configClasses = unwrapConfigClasses('tooltip.content', config, props);
    return [base, sizeClasses, animationClasses, configClasses, className];
  });
  var arrowClassNames = useClassNames(function () {
    var base = 'fill-transparent';
    var configClasses = unwrapConfigClasses('tooltip.content_arrow', config, props);
    return [base, configClasses, arrowClassName];
  });
  return React__default.createElement(RadixTooltip.Portal, {
    container: container != null ? container : body
  }, React__default.createElement(ThemeProvider, Object.assign({}, rest, {
    sideOffset: sideOffset,
    as: RadixTooltip.Content,
    theme: theme,
    size: size,
    dark: dark,
    className: classNames
  }), props.children, !arrowClassNames.includes('fill-transparent') && React__default.createElement(RadixTooltip.Arrow, {
    className: arrowClassNames
  })));
};

var Tooltip = /*#__PURE__*/Object.assign(TooltipRoot, {
  Root: TooltipRoot,
  Trigger: TooltipTrigger,
  Content: TooltipContent
});

// ! For internal use only, do not export from index.ts
var getInputBaseCx = function getInputBaseCx(options) {
  var base = 'font-medium tracking-tight rounded border disabled:opacity-75 disabled:cursor-not-allowed';
  var mountedStyles = options != null && options.mounted ? 'enabled:hover:transition-colors' : '';
  var focusStyles = options != null && options.removeFocus ? '' : 'focus:outline-none ring-0 focus-within:relative transition-[ring] focus-within:z-20 focus:ring focus-within:ring focus:ring-theme-base/50 focus-within:ring-theme-base/50';
  var override = options == null ? void 0 : options.override;
  var overrideStyles = '';

  if (typeof override === 'function') {
    overrideStyles = override();
  } else if (typeof override === 'string') {
    overrideStyles = override;
  }

  return [base, mountedStyles, focusStyles, overrideStyles].join(' ');
};
var getInputSizeCx = function getInputSizeCx(options) {
  var base = 'pl-size-x pr-size-x pt-size-y pb-size-y text-size leading-size';
  var override = options == null ? void 0 : options.override;
  var overrideStyles = '';

  if (typeof override === 'function') {
    overrideStyles = override();
  } else if (typeof override === 'string') {
    overrideStyles = override;
  }

  return [base, overrideStyles].join(' ');
};
var getInputVariantCx = function getInputVariantCx(variant, options) {
  var _ref = options || {},
      removeHover = _ref.removeHover,
      override = _ref.override;

  var INPUT_VARIANT_STYLES = {
    solid: "\n      bg-theme-base\n      text-theme-base\n      placeholder:text-theme-muted\n      border-theme-muted group-data-[uui=true]/card:border-theme-base\n      " + (removeHover ? '' : 'enabled:hover:bg-theme-active') + "\n\n      ",
    outline: "\n      bg-transparent\n      text-theme-base\n      placeholder:text-theme-muted\n      border-theme-base\n      " + (removeHover ? '' : 'enabled:hover:bg-theme-active') + "\n    ",
    ghost: "\n      bg-transparent\n      text-theme-base hover:text-theme-active\n      placeholder:text-theme-muted\n      border-transparent\n      " + (removeHover ? '' : 'enabled:hover:bg-theme-active') + "\n    ",
    inverted: "\n      bg-theme-inverted \n      text-theme-inverted \n      border-theme-inverted\n      " + (removeHover ? '' : 'enabled:hover:bg-theme-base enabled:hover:text-theme-active') + "\n      "
  };
  var overrideStyles = (override == null ? void 0 : override(variant)) || '';
  return [INPUT_VARIANT_STYLES[variant], overrideStyles].join(' ');
};
var getInputGroupItemCx = function getInputGroupItemCx(options) {
  var base = 'shadow-none rounded-none focus:relative focus:z-10 first:rounded-l last:rounded-r ';
  var borderOptions = {
    left: 'border-r-0 last:border-r',
    right: 'border-l-0 first:border-l',
    both: '',
    none: 'first:border-l last:border-r border-0'
  };
  return [base, borderOptions[(options == null ? void 0 : options.borderOption) || 'both']].join(' ');
};

var ICON_MAP = {
  'chevron-down': /*#__PURE__*/React__default.createElement("svg", {
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  })),
  check: /*#__PURE__*/React__default.createElement("svg", {
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  })),
  selector: /*#__PURE__*/React__default.createElement("svg", {
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }))
};
var Icon = function Icon(_ref) {
  var props = _extends({}, _ref);

  return React__default.cloneElement(ICON_MAP[props.name], props);
};

var _excluded$8 = ["size", "theme", "dark", "className"];
var CheckboxRoot = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var size = props.size,
      theme = props.theme,
      dark = props.dark,
      className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded$8);

  var config = useUniversalUIConfig();
  var mounted = useMounted();
  var classNames = useClassNames(function () {
    var base = getInputBaseCx({
      override: 'bg-theme-pure border-theme-active',
      mounted: mounted
    });
    var sizeClass = 'w-[calc(var(--size-text)+var(--size-qx))] h-[calc(var(--size-text)+var(--size-qx))] flex-shrink-0';
    var configClasses = unwrapConfigClasses('checkbox', config, props);
    return [base, sizeClass, configClasses, className];
  });
  return React__default.createElement(RadixCheckbox.Root, Object.assign({}, rest, {
    className: classNames,
    ref: ref,
    "data-theme": theme,
    "data-dark": dark,
    "data-size": size
  }), React__default.createElement(RadixCheckbox.Indicator, null, React__default.createElement(Icon, {
    name: "check",
    className: "text-theme-base/80"
  })));
});
var Checkbox = /*#__PURE__*/Object.assign(CheckboxRoot, {});

// ! For internal use only, do not export from index.ts
var InputGroupContext = /*#__PURE__*/React.createContext(null);
var useInputGroupContext = function useInputGroupContext() {
  return React.useContext(InputGroupContext);
};

var InputIcon = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      _props$type = props.type,
      type = _props$type === void 0 ? 'center' : _props$type;
  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'h-size-line aspect-square relative scale-75 text-theme-muted pointer-events-none select-none';
    var positionClasses = {
      center: '',
      leading: 'relative -left-size-qx ',
      trailing: 'relative -right-size-qx '
    };
    var configClasses = unwrapConfigClasses('input-icon', config, props);
    return [base, positionClasses[type], configClasses, className];
  });
  return React__default.createElement("span", {
    className: classNames,
    "aria-hidden": "true",
    ref: ref
  }, children);
});

var _excluded$9 = ["size", "theme", "variant", "dark", "className", "borderOption"];
var DEFAULT_INPUT_GROUP_TAG = 'div';
var InputGroup = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var size = props.size,
      theme = props.theme,
      _props$variant = props.variant,
      variant = _props$variant === void 0 ? 'solid' : _props$variant,
      dark = props.dark,
      className = props.className,
      _props$borderOption = props.borderOption,
      borderOption = _props$borderOption === void 0 ? 'right' : _props$borderOption,
      rest = _objectWithoutPropertiesLoose(props, _excluded$9);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'inline-flex rounded';
    var configClasses = unwrapConfigClasses('input-group', config, props);
    return [base, configClasses, className];
  });
  return React__default.createElement(InputGroupContext.Provider, {
    value: {
      variant: variant,
      borderOption: borderOption
    }
  }, render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames,
      'data-size': size,
      'data-theme': theme,
      'data-dark': dark
    }, rest),
    defaultTag: DEFAULT_INPUT_GROUP_TAG
  }));
});

var _excluded$a = ["size", "theme", "variant", "dark", "className", "icon", "leadingIcon", "trailingIcon", "children"];
var DEFAULT_BUTTON_TAG = 'button';
var ButtonRoot = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var size = props.size,
      theme = props.theme,
      variant = props.variant,
      dark = props.dark,
      className = props.className,
      icon = props.icon,
      leadingIcon = props.leadingIcon,
      trailingIcon = props.trailingIcon,
      children = props.children,
      rest = _objectWithoutPropertiesLoose(props, _excluded$a);

  var config = useUniversalUIConfig();
  var inputGroupContext = useInputGroupContext();
  var mounted = useMounted();
  var classNames = useClassNames(function () {
    var base = getInputBaseCx({
      override: 'select-none inline-flex items-center justify-center',
      mounted: mounted
    });
    var sizeClass = getInputSizeCx({
      override: function override() {
        if (icon) {
          return 'pl-size-y pr-size-y';
        }

        return '';
      }
    });
    var groupVariantClass = inputGroupContext == null ? void 0 : inputGroupContext.variant;
    var variantClass = getInputVariantCx(variant || groupVariantClass || 'solid', {
      removeHover: props.disabled
    });
    var inGroup = inputGroupContext !== null;
    var groupClasses = inGroup && getInputGroupItemCx({
      borderOption: inputGroupContext == null ? void 0 : inputGroupContext.borderOption
    });
    var configClasses = unwrapConfigClasses('button', config, _extends({}, props, {
      inGroup: inGroup
    }));
    return [base, sizeClass, variantClass, groupClasses, configClasses, className];
  });
  return render({
    // @ts-ignore
    props: _extends({
      ref: ref,
      className: classNames,
      'data-size': size,
      'data-theme': theme,
      'data-dark': dark,
      children: React__default.createElement(React__default.Fragment, null, leadingIcon && React__default.createElement(InputIcon, {
        type: "leading"
      }, leadingIcon), icon ? React__default.createElement("span", {
        className: "sr-only"
      }, children) : children, icon && React__default.createElement(InputIcon, {
        type: "center"
      }, icon), trailingIcon && React__default.createElement(InputIcon, {
        type: "trailing"
      }, trailingIcon))
    }, rest),
    defaultTag: DEFAULT_BUTTON_TAG
  });
});
var Button = /*#__PURE__*/Object.assign(ButtonRoot, {
  Group: InputGroup
});

var _excluded$b = ["size", "theme", "variant", "dark", "className", "leadingIcon", "trailingIcon", "inputRef"];
var DEFAULT_INPUT_TAG = 'div';
var Input = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var size = props.size,
      theme = props.theme,
      variant = props.variant,
      dark = props.dark,
      className = props.className,
      leadingIcon = props.leadingIcon,
      trailingIcon = props.trailingIcon,
      inputRef = props.inputRef,
      rest = _objectWithoutPropertiesLoose(props, _excluded$b);

  var config = useUniversalUIConfig();
  var inputGroupContext = useInputGroupContext();
  var mounted = useMounted();
  var classNames = useClassNames(function () {
    var base = getInputBaseCx({
      override: 'font-normal placeholder:opacity-50 truncate w-max flex items-center',
      mounted: mounted
    });
    var sizeClass = getInputSizeCx();
    var groupVariantClass = inputGroupContext == null ? void 0 : inputGroupContext.variant;
    var variantClass = getInputVariantCx(variant || groupVariantClass || 'solid', {
      removeHover: true,
      override: function override(v) {
        switch (v) {
          case 'solid':
            return 'bg-theme-pure border-theme-base';

          default:
            return '';
        }
      }
    });
    var inGroup = inputGroupContext !== null;
    var groupClasses = inGroup && getInputGroupItemCx({
      borderOption: inputGroupContext == null ? void 0 : inputGroupContext.borderOption
    });
    var configClasses = unwrapConfigClasses('input', config, _extends({}, props, {
      inGroup: inGroup
    }));
    return [base, sizeClass, variantClass, groupClasses, configClasses, className];
  });
  var inputClassNames = useClassNames(function () {
    var base = 'bg-transparent focus:outline-none placeholder:text-theme-muted truncate placeholder:opacity-50 w-full disabled:opacity-50 disabled:cursor-not-allowed';
    var configClasses = unwrapConfigClasses('input_inner', config, _extends({}, props, {
      inGroup: inputGroupContext !== null
    }));
    return [base, configClasses];
  });
  return render({
    props: {
      ref: ref,
      className: classNames,
      'data-size': size,
      'data-theme': theme,
      'data-dark': dark,
      children: React__default.createElement(React__default.Fragment, null, leadingIcon && React__default.createElement(InputIcon, {
        type: "leading"
      }, leadingIcon), React__default.createElement("input", Object.assign({}, rest, {
        className: inputClassNames,
        ref: inputRef
      })), trailingIcon && React__default.createElement(InputIcon, {
        type: "trailing"
      }, trailingIcon))
    },
    defaultTag: DEFAULT_INPUT_TAG
  });
});

var _excluded$c = ["size", "theme", "dark", "children"],
    _excluded2$5 = ["variant", "className", "children", "leadingIcon", "trailingIcon"],
    _excluded3$3 = ["className", "children", "as"],
    _excluded4$1 = ["className", "children", "value", "theme", "leadingIcon", "trailingIcon", "textClassName"];
var SelectContext = /*#__PURE__*/React__default.createContext({
  size: 'md',
  theme: 'neutral',
  dark: false
});

var SelectRoot = function SelectRoot(props) {
  var size = props.size,
      theme = props.theme,
      dark = props.dark,
      children = props.children,
      rest = _objectWithoutPropertiesLoose(props, _excluded$c);

  return React__default.createElement(RadixSelect.Root, Object.assign({}, rest), React__default.createElement(SelectContext.Provider, {
    value: {
      size: size,
      theme: theme,
      dark: dark
    }
  }, children));
};

var DEFAULT_SELECT_TRIGGER_TAG = 'button';
var SelectTrigger = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var variant = props.variant,
      className = props.className,
      children = props.children,
      leadingIcon = props.leadingIcon,
      _props$trailingIcon = props.trailingIcon,
      trailingIcon = _props$trailingIcon === void 0 ? React__default.createElement(Icon, {
    name: "selector"
  }) : _props$trailingIcon,
      rest = _objectWithoutPropertiesLoose(props, _excluded2$5);

  var config = useUniversalUIConfig();
  var inputGroupContext = useInputGroupContext();

  var _React$useContext = React__default.useContext(SelectContext),
      size = _React$useContext.size,
      theme = _React$useContext.theme,
      dark = _React$useContext.dark;

  var mounted = useMounted();
  var classNames = useClassNames(function () {
    var base = getInputBaseCx({
      override: 'hover:bg-theme-base group/select-trigger',
      mounted: mounted
    });
    var sizeClass = getInputSizeCx();
    var groupVariantClass = inputGroupContext == null ? void 0 : inputGroupContext.variant;
    var variantClass = getInputVariantCx(variant || groupVariantClass || 'solid', {
      override: function override(_) {
        return 'bg-theme-pure';
      }
    });
    var inGroup = inputGroupContext !== null;
    var groupClasses = inGroup && getInputGroupItemCx({
      borderOption: inputGroupContext == null ? void 0 : inputGroupContext.borderOption
    });
    var configClasses = unwrapConfigClasses('select.trigger', config, _extends({}, props, {
      size: size,
      theme: theme,
      variant: variant,
      inGroup: inGroup
    }));
    return [base, sizeClass, variantClass, groupClasses, configClasses, className];
  });
  return React__default.createElement(RadixSelect.Trigger, {
    asChild: true
  }, render({
    // @ts-ignore
    props: _extends({
      'data-size': size,
      'data-theme': theme,
      'data-dark': dark,
      className: classNames,
      ref: ref,
      children: React__default.createElement("div", {
        className: "flex items-center justify-stretch min-w-[15ch]"
      }, leadingIcon && React__default.createElement(RadixSelect.Icon, {
        asChild: true
      }, React__default.createElement(InputIcon, {
        type: "leading"
      }, leadingIcon)), React__default.createElement(RadixSelect.Value, {
        placeholder: rest.placeholder || 'Select an option...',
        className: "inline flex-1"
      }, children), trailingIcon && React__default.createElement(RadixSelect.Icon, {
        asChild: true
      }, React__default.createElement(InputIcon, {
        type: "trailing",
        className: "ml-auto"
      }, trailingIcon)))
    }, rest),
    defaultTag: DEFAULT_SELECT_TRIGGER_TAG
  }));
});
var DEFAULT_SELECT_PANEL_TAG = 'div';
var SelectPanel = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      children = props.children,
      asElement = props.as,
      rest = _objectWithoutPropertiesLoose(props, _excluded3$3);

  var config = useUniversalUIConfig();

  var _React$useContext2 = React__default.useContext(SelectContext),
      size = _React$useContext2.size,
      theme = _React$useContext2.theme,
      dark = _React$useContext2.dark;

  var body = useBodyElement();
  var classNames = useClassNames(function () {
    var base = 'bg-theme-pure px-size-qx py-size-qx rounded border border-theme-base shadow-md z-[51]';
    var configClasses = unwrapConfigClasses('select.panel', config, props);
    return [base, configClasses, className];
  });
  return React__default.createElement(RadixSelect.Portal, {
    container: body
  }, React__default.createElement(ThemeProvider, Object.assign({
    theme: theme,
    dark: dark,
    size: size,
    ref: ref,
    // @ts-ignore
    as: asElement || DEFAULT_SELECT_PANEL_TAG
  }, rest), React__default.createElement(RadixSelect.Content, {
    className: classNames
  }, React__default.createElement(RadixSelect.ScrollUpButton, {
    className: "grid place-items-center"
  }, React__default.createElement(InputIcon, {
    type: "center"
  }, React__default.createElement(Icon, {
    name: "chevron-down",
    className: "h-size-line rotate-180"
  }))), React__default.createElement(RadixSelect.Viewport, null, children), React__default.createElement(RadixSelect.ScrollDownButton, {
    className: "grid place-items-center"
  }, React__default.createElement(InputIcon, {
    type: "center"
  }, React__default.createElement(Icon, {
    name: "chevron-down",
    className: "h-size-line"
  }))))));
});
var DEFAULT_SELECT_ITEM_TAG = 'button';
var SelectItem = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var className = props.className,
      children = props.children,
      value = props.value,
      theme = props.theme,
      leadingIcon = props.leadingIcon,
      _props$trailingIcon2 = props.trailingIcon,
      trailingIcon = _props$trailingIcon2 === void 0 ? React__default.createElement(Icon, {
    name: "check"
  }) : _props$trailingIcon2,
      textClassName = props.textClassName,
      rest = _objectWithoutPropertiesLoose(props, _excluded4$1);

  var config = useUniversalUIConfig();
  var classNames = useClassNames(function () {
    var base = 'flex items-center rounded w-full text-left border border-transparent group/select-item data-[disabled]:opacity-50 data-[disabled]:cursor-not-allowed';
    var focusClasses = 'focus:bg-theme-base focus:outline-none data-[state=checked]:bg-theme-active';
    var sizeClass = getInputSizeCx({
      override: 'pt-size-hy pb-size-hy'
    });
    var configClasses = unwrapConfigClasses('select.item', config, props);
    return [base, focusClasses, sizeClass, configClasses, className];
  });
  var textClassNames = useClassNames(function () {
    var base = 'text-theme-base group-data-[state=closed]/select-trigger:text-theme-base group-data-[state=checked]/select-item:font-medium';
    var configClasses = unwrapConfigClasses('select.item_text', config, props);
    return [base, configClasses, textClassName];
  });
  return React__default.createElement(RadixSelect.Item, Object.assign({}, rest, {
    value: value,
    asChild: true
  }), render({
    props: {
      className: classNames,
      'data-theme': theme,
      children: React__default.createElement(React__default.Fragment, null, leadingIcon && React__default.createElement(RadixSelect.ItemIndicator, {
        asChild: true
      }, React__default.createElement(InputIcon, {
        type: "leading"
      }, leadingIcon)), React__default.createElement(RadixSelect.ItemText, {
        asChild: true
      }, React__default.createElement("span", {
        className: textClassNames
      }, children)), trailingIcon && React__default.createElement(RadixSelect.ItemIndicator, {
        asChild: true
      }, React__default.createElement(InputIcon, {
        type: "trailing",
        className: "ml-auto"
      }, trailingIcon))),
      ref: ref
    },
    defaultTag: DEFAULT_SELECT_ITEM_TAG
  }));
});
var Select = /*#__PURE__*/Object.assign(SelectRoot, {
  Trigger: SelectTrigger,
  Panel: SelectPanel,
  Item: SelectItem
});

var _excluded$d = ["size", "theme", "variant", "dark", "className", "leadingIcon", "trailingIcon", "textareaRef"];
var DEFAULT_TEXTAREA_TAG = 'div';
var TextArea = /*#__PURE__*/forwardRefWithAs(function (props, ref) {
  var size = props.size,
      theme = props.theme,
      variant = props.variant,
      dark = props.dark,
      className = props.className,
      leadingIcon = props.leadingIcon,
      trailingIcon = props.trailingIcon,
      textareaRef = props.textareaRef,
      rest = _objectWithoutPropertiesLoose(props, _excluded$d);

  var config = useUniversalUIConfig();
  var mounted = useMounted();
  var classNames = useClassNames(function () {
    var base = getInputBaseCx({
      override: 'font-normal placeholder:opacity-50 truncate w-max flex ',
      mounted: mounted
    });
    var sizeClass = getInputSizeCx({
      override: 'pl-0 pr-0 pt-0 pb-0'
    }); // const groupVariantClass = inputGroupContext?.variant;

    var variantClass = getInputVariantCx(variant || 'solid', {
      removeHover: true,
      override: function override(v) {
        switch (v) {
          case 'solid':
            return 'bg-theme-pure border-theme-base';

          default:
            return '';
        }
      }
    }); // const inGroup = inputGroupContext !== null;
    // const groupClasses =
    //   inGroup &&
    //   getInputGroupItemCx({ borderOption: inputGroupContext?.borderOption });

    var configClasses = unwrapConfigClasses('input', config, _extends({}, props));
    return [base, sizeClass, variantClass, // groupClasses,
    configClasses, className];
  });
  var textareaClassNames = useClassNames(function () {
    var base = 'bg-transparent focus:outline-none placeholder:text-theme-muted truncate placeholder:opacity-50 w-full disabled:opacity-50 disabled:cursor-not-allowed';
    var sizeClasses = " " + (!!leadingIcon ? '' : 'pl-size-x') + " " + (!!trailingIcon ? '' : 'pr-size-x') + " pt-size-y pb-size-y ";
    var configClasses = unwrapConfigClasses('input_inner', config, _extends({}, props));
    return [base, sizeClasses, configClasses];
  });
  return render({
    props: {
      ref: ref,
      className: classNames,
      'data-size': size,
      'data-theme': theme,
      'data-dark': dark,
      children: React__default.createElement(React__default.Fragment, null, leadingIcon && React__default.createElement(InputIcon, {
        className: "ml-size-x mt-size-y -left-size-hx",
        type: "leading"
      }, leadingIcon), React__default.createElement("textarea", Object.assign({}, rest, {
        className: textareaClassNames,
        ref: textareaRef
      })), trailingIcon && React__default.createElement(InputIcon, {
        type: "trailing",
        className: "mr-size-x mt-size-y -right-size-hx"
      }, trailingIcon))
    },
    defaultTag: DEFAULT_TEXTAREA_TAG
  });
});

exports.Button = Button;
exports.Card = Card;
exports.Checkbox = Checkbox;
exports.Dialog = Dialog;
exports.Input = Input;
exports.InputGroup = InputGroup;
exports.Popover = Popover;
exports.Select = Select;
exports.Tabs = Tabs;
exports.Text = Text;
exports.TextArea = TextArea;
exports.ThemeProvider = ThemeProvider;
exports.Tooltip = Tooltip;
exports.UniversalUIConfigContext = UniversalUIConfigContext;
exports.UniversalUIConfigProvider = UniversalUIConfigProvider;
exports.useUniversalUIConfig = useUniversalUIConfig;
//# sourceMappingURL=universal-ui.cjs.development.js.map
