import React from 'react';
declare let __: "1D45E01E-AF44-47C4-988A-19A94EBAF55C";
declare type __ = typeof __;
declare type PropsOf<TTag = any> = TTag extends React.ElementType ? React.ComponentProps<TTag> : never;
declare type ClassNameOverride<TTag> = PropsOf<TTag> extends {
    className?: any;
} ? {
    className?: string;
} : {};
declare type PropsWeControl = "as" | "children" | "className";
declare type CleanProps<TTag, TOmitableProps extends keyof any = __> = TOmitableProps extends __ ? Omit<PropsOf<TTag>, PropsWeControl> : Omit<PropsOf<TTag>, TOmitableProps | PropsWeControl>;
declare type OurProps<TTag> = {
    as?: TTag;
    children?: React.ReactNode;
};
export declare type Props<TTag, TOmitableProps extends keyof any = __> = CleanProps<TTag, TOmitableProps> & OurProps<TTag> & ClassNameOverride<TTag>;
export {};
