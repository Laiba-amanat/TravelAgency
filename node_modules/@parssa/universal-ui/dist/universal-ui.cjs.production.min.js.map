{"version":3,"file":"universal-ui.cjs.production.min.js","sources":["../src/core/render.ts","../src/core/ssr.ts","../src/core/unwrapConfigClasses.ts","../src/config/ThemeProvider.tsx","../src/hooks/useDarkMode.ts","../src/hooks/useMedia.ts","../src/hooks/useClient.ts","../src/config/UniversalUIConfigContext.tsx","../src/hooks/useClassNames.ts","../src/components/display/Card.tsx","../src/hooks/useBody.ts","../src/components/display/Dialog.tsx","../src/components/display/Popover.tsx","../src/components/display/Tabs.tsx","../src/components/display/Text.tsx","../src/components/display/Tooltip.tsx","../src/components/inputs/constants.ts","../src/components/icons/Icon.tsx","../src/components/inputs/Checkbox.tsx","../src/components/inputs/InputGroupContext.ts","../src/components/inputs/InputIcon.tsx","../src/components/inputs/InputGroup.tsx","../src/components/inputs/Button.tsx","../src/components/inputs/Input.tsx","../src/components/inputs/Select.tsx","../src/components/inputs/TextArea.tsx"],"sourcesContent":["import React from \"react\";\nimport { Props } from \"./types\";\n\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(React.forwardRef(component as unknown as any) as any, {\n    displayName: component.displayName ?? component.name\n  });\n}\n\nexport function render<TTag extends React.ElementType>({\n  props,\n  defaultTag\n}: {\n  props: Props<TTag>;\n  defaultTag: React.ElementType;\n}) {\n  const { as: Component = defaultTag, ...rest } = props;\n  return React.createElement(Component, rest);\n}\n","export const isSSR = !(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.documentElement\n);\n","import { UniversalUIConfigContextProps } from '../config/UniversalUIConfigContext';\n\nexport const unwrapConfigClasses = <\n  T extends {} = keyof UniversalUIConfigContextProps['components']\n>(\n  component: keyof UniversalUIConfigContextProps['components'],\n  context: UniversalUIConfigContextProps,\n  props: T\n) => {\n  const classes = context.components[component];\n\n  if (typeof classes === 'string') {\n    return classes;\n  }\n\n  if (typeof classes === 'function') {\n    // @ts-ignore\n    return classes(props);\n  }\n\n  return '';\n};\n","import React from 'react';\nimport { forwardRefWithAs, isSSR, Props, render } from '../core';\nimport { useDarkMode } from '../hooks/useDarkMode';\nimport { Size, Theme } from '../types';\n\nexport interface ThemeProviderProps {\n  theme?: Theme;\n  size?: Size;\n  dark?: boolean;\n  inverted?: boolean;\n}\n\nconst DEFAULT_THEME_PROVIDER_TAG = 'div';\n\nexport const ThemeProvider = forwardRefWithAs(function <\n  TTag extends React.ElementType = typeof DEFAULT_THEME_PROVIDER_TAG\n>(props: Props<TTag> & ThemeProviderProps, ref: React.Ref<TTag>) {\n  const { theme = 'neutral', size = 'md', dark, inverted, ...rest } = props;\n\n  const [enabled] = useDarkMode();\n\n  const isRootEnabled = () => {\n    if (!isSSR) return enabled;\n\n    if (\n      typeof window !== 'undefined' &&\n      typeof document !== 'undefined' &&\n      window &&\n      document &&\n      document.body.dataset.theme?.includes('dark')\n    )\n      return true;\n    return false;\n  };\n\n  const isDark = typeof dark !== 'undefined' ? dark : isRootEnabled();\n\n  const isDarkWithInverted = typeof inverted !== 'undefined' ? !isDark : isDark;\n\n  return render({\n    props: {\n      'data-theme': theme,\n      'data-dark': isDarkWithInverted,\n      'data-size': size,\n      ref,\n      ...rest,\n    },\n    defaultTag: DEFAULT_THEME_PROVIDER_TAG,\n  });\n});\n","// import { useUniversalUIConfig } from './../config/UniversalUIConfigContext';\nimport { useState, useEffect } from 'react';\nimport { useMedia } from './useMedia';\nimport { useClient } from './useClient';\n\nfunction usePrefersDarkMode() {\n  return useMedia(['(prefers-color-scheme: dark)'], [true], false);\n}\n\nexport const useDarkMode = () => {\n  const prefersDarkMode = usePrefersDarkMode();\n  const [stored, setStored] = useState(false);\n\n  const client = useClient();\n\n  useEffect(() => {\n    setStored(prefersDarkMode);\n  }, [prefersDarkMode, client]);\n\n  return [stored] as const;\n};\n","import { useEffect, useState } from 'react';\nimport { isSSR } from '../core';\n\nexport const useMedia = <T>(\n  queries: string[],\n  values: T[],\n  defaultValue: T\n) => {\n  // Array containing a media query list for each query\n  const mediaQueryLists = isSSR ? [] : queries.map(q => window.matchMedia(q));\n  // Function that gets value based on matching media query\n  const getValue = () => {\n    // Get index of first media query that matches\n    const index = mediaQueryLists.findIndex(mql => mql.matches);\n    // Return related value or defaultValue if none\n    return values?.[index] || defaultValue;\n  };\n  // State and setter for matched value\n  const [value, setValue] = useState<T>(getValue);\n  useEffect(\n    () => {\n      // Event listener callback\n      // Note: By defining getValue outside of useEffect we ensure that it has ...\n      // ... current values of hook args (as this hook callback is created once on mount).\n      const handler = () => setValue(getValue);\n      // Set a listener for each media query with above handler as callback.\n      mediaQueryLists.forEach(mql => mql.addEventListener('change', handler));\n      // Remove listeners on cleanup\n      return () =>\n        mediaQueryLists.forEach(mql =>\n          mql.removeEventListener('change', handler)\n        );\n    },\n    [] // Empty array ensures effect is only run on mount and unmount\n  );\n  return value;\n};\n","import { useState, useEffect } from 'react';\n\nexport const useClient = () => {\n  const [client, setClient] = useState(false);\n\n  useEffect(() => {\n    setClient(true);\n  }, []);\n\n  return client;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { CardContentProps, CardProps } from '../components/display/Card';\nimport { TextProps } from '../components/display/Text';\nimport { ButtonProps } from '../components/inputs/Button';\nimport { InputProps } from '../components/inputs/Input';\nimport { InputGroupProps } from '../components/inputs/InputGroup';\nimport * as Tooltip from '@radix-ui/react-tooltip';\nimport {\n  SelectItemProps,\n  SelectPanelProps,\n  SelectTriggerProps,\n} from '../components/inputs/Select';\nimport { Size, Theme, Variant } from '../types';\nimport {\n  TooltipContentProps,\n  TooltipTriggerProps,\n} from '../components/display/Tooltip';\nimport { ThemeProvider, ThemeProviderProps } from './ThemeProvider';\nimport { DialogProps } from '../components/display/Dialog';\nimport { InputIconProps } from '../components/inputs/InputIcon';\nimport {\n  PopoverContentProps,\n  PopoverTriggerProps,\n} from '../components/display/Popover';\nimport {\n  TabsContentProps,\n  TabsListProps,\n  TabsTriggerProps,\n} from '../components/display/Tabs';\n\ninterface CanBeInsideInputGroup {\n  inGroup?: boolean;\n}\n\ninterface WithClassName {\n  className?: string;\n}\n\ninterface WithThemeSizeVariant {\n  theme?: Theme;\n  size?: Size;\n  variant?: Variant;\n}\n\nexport type UniversalUIConfigContextProps = {\n  components: {\n    // -- Inputs --\n    button?:\n      | string\n      | ((\n          props: ButtonProps & CanBeInsideInputGroup & WithClassName\n        ) => string);\n    checkbox?: string | ((props: InputProps & WithClassName) => string);\n    'input-group'?:\n      | string\n      | ((props: InputGroupProps & WithClassName) => string);\n    input?:\n      | string\n      | ((props: InputProps & CanBeInsideInputGroup & WithClassName) => string);\n    input_inner?:\n      | string\n      | ((props: InputProps & CanBeInsideInputGroup & WithClassName) => string);\n    'select.trigger'?:\n      | string\n      | ((\n          props: SelectTriggerProps &\n            CanBeInsideInputGroup &\n            WithThemeSizeVariant &\n            WithClassName\n        ) => string);\n    'input-icon'?: string | ((props: InputIconProps & WithClassName) => string);\n    'select.panel'?:\n      | string\n      | ((props: SelectPanelProps & WithClassName) => string);\n    'select.item'?:\n      | string\n      | ((props: SelectItemProps & WithClassName) => string);\n    'select.item_text'?:\n      | string\n      | ((props: SelectItemProps & WithClassName) => string);\n\n    // -- Display --\n    card?: string | ((props: CardProps & WithClassName) => string);\n    'card.content'?:\n      | string\n      | ((props: CardContentProps & WithClassName) => string);\n    dialog?: string | ((props: DialogProps & WithClassName) => string);\n    dialog_overlay?: string | ((props: DialogProps & WithClassName) => string);\n    dialog_root?: string | ((props: DialogProps & WithClassName) => string);\n    // popover?: string | ((props: WithClassName) => string);\n    'popover.trigger'?:\n      | string\n      | ((props: PopoverTriggerProps & WithClassName) => string);\n    'popover.content'?:\n      | string\n      | ((props: PopoverContentProps & WithClassName) => string);\n    'popover.content_arrow'?:\n      | string\n      | ((props: PopoverContentProps & WithClassName) => string);\n    'dialog.content'?: string | ((props: WithClassName) => string);\n    'dialog.title'?: string | ((props: WithClassName) => string);\n    'tabs.list'?: string | ((props: TabsListProps & WithClassName) => string);\n    'tabs.trigger'?:\n      | string\n      | ((props: TabsTriggerProps & WithClassName) => string);\n    'tabs.content'?:\n      | string\n      | ((props: TabsContentProps & WithClassName) => string);\n    text?: string | ((props: TextProps & WithClassName) => string);\n    'tooltip.trigger'?:\n      | string\n      | ((props: TooltipTriggerProps & WithClassName) => string);\n    'tooltip.content'?:\n      | string\n      | ((props: TooltipContentProps & WithClassName) => string);\n    'tooltip.content_arrow'?:\n      | string\n      | ((props: TooltipContentProps & WithClassName) => string);\n  };\n  providers?: {\n    tooltip?: Omit<Tooltip.TooltipProviderProps, 'children'>;\n    theme?: Omit<ThemeProviderProps, 'children'>;\n  };\n  ssr?: boolean;\n};\n\nexport const UniversalUIConfigContext = createContext<\n  UniversalUIConfigContextProps\n>({\n  components: {},\n  ssr: false,\n});\n\nexport const UniversalUIConfigProvider = ({\n  children,\n  config,\n}: {\n  children: React.ReactNode;\n  config?: UniversalUIConfigContextProps;\n}) => {\n  const [v, setV] = useState(\n    !config?.ssr\n      ? config\n      : {\n          components: {},\n        }\n  );\n\n  useEffect(() => {\n    setV(v);\n  }, [config]);\n\n  return (\n    <UniversalUIConfigContext.Provider value={v ?? { components: {} }}>\n      <ThemeProvider {...config?.providers?.theme}>\n        <Tooltip.Provider {...config?.providers?.tooltip}>\n          {children}\n        </Tooltip.Provider>\n      </ThemeProvider>\n    </UniversalUIConfigContext.Provider>\n  );\n};\n\nexport const useUniversalUIConfig = () => {\n  return useContext(\n    // @ts-ignore\n    typeof createContext === 'function'\n      ? UniversalUIConfigContext\n      : {\n          displayName: 'SSR_MODE',\n        }\n  );\n};\n","import { useMemo, useState, useEffect  } from 'react';\n\nimport { extendTailwindMerge } from 'tailwind-merge';\n\nexport const useClassNames = (\n  fn: () => (string | undefined | false | null)[]\n) => {\n  const classes = fn();\n  return cx(classes);\n};\n\nexport const useMounted = () => { \n  const [mounted, setMounted] = useState(false);\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  return mounted;\n}\n\nexport const useMemoizedClassNames = (\n  fn: () => (string | undefined | false | null)[],\n  deps: React.DependencyList\n) => {\n  return useMemo(() => {\n    const classes = fn();\n    return cx(classes);\n  }, deps);\n};\n\nconst SPACING_CLASSES = [\n  'size-x',\n  'size-y',\n  'size-2x',\n  'size-2y',\n  'size-hx',\n  'size-hy',\n  'size-qx',\n  'size-qy',\n  'size-4x',\n  'size-4y',\n];\nconst twMerge = extendTailwindMerge({\n  classGroups: {\n    'font-size': [{ text: ['size'] }],\n    'padding-left': [{ pl: SPACING_CLASSES }],\n    'padding-right': [{ pr: SPACING_CLASSES }],\n    pt: [{ pt: SPACING_CLASSES }],\n    pb: [{ pb: SPACING_CLASSES }],\n    px: [{ px: SPACING_CLASSES }],\n    py: [{ py: SPACING_CLASSES }],\n    pr: [{ py: SPACING_CLASSES }],\n    pl: [{ py: SPACING_CLASSES }],\n    padding: [{ p: SPACING_CLASSES }],\n    'margin-left': [{ ml: SPACING_CLASSES }],\n    'margin-right': [{ mr: SPACING_CLASSES }],\n    'margin-top': [{ mt: SPACING_CLASSES }],\n    'margin-bottom': [{ mb: SPACING_CLASSES }],\n    'margin-x': [{ mx: SPACING_CLASSES }],\n    'margin-y': [{ my: SPACING_CLASSES }],\n    margin: [{ m: SPACING_CLASSES }],\n    'text-color': [{ text: ['theme-base', 'theme-inverted', 'theme-active'] }],\n    leading: [{ leading: ['size'] }],\n  },\n});\n\nexport const cx = (classes: Array<string | undefined | false | null>) => {\n  return twMerge(\n    Array.from(classes)\n      .filter(Boolean)\n      .join(' ')\n      .replace(/\\s+/g, ' ') // remove extra whitespace\n      .trim()\n  );\n};\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport { Size, Theme } from '../../types';\n\nexport interface CardProps {\n  size?: Size;\n  theme?: Theme;\n  dark?: boolean;\n}\n\nconst DEFAULT_CARD_TAG = 'div';\n\nconst CardRoot = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_CARD_TAG\n>(props: Props<TTag> & CardProps, ref: React.Ref<TTag>) {\n  const { size, theme, dark, className, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'border border-theme-base rounded-md shadow-sm bg-theme-pure group/card';\n\n    const configClasses = unwrapConfigClasses('card', config, props);\n\n    return [base, configClasses, className];\n  });\n\n  return render({\n    // @ts-ignore\n    props: {\n      ref,\n      className: classNames,\n      'data-size': size,\n      'data-theme': theme,\n      'data-dark': dark,\n      'data-uui': true,\n      ...rest,\n    },\n    defaultTag: DEFAULT_CARD_TAG,\n  });\n});\n\nexport interface CardContentProps {}\n\nconst CardContent = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_CARD_TAG\n>(props: Props<TTag> & CardContentProps, ref: React.Ref<TTag>) {\n  const { className, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'p-size-x';\n\n    const configClasses = unwrapConfigClasses('card.content', config, props);\n\n    return [base, configClasses, className];\n  });\n\n  return render({\n    // @ts-ignore\n    props: {\n      ref,\n      className: classNames,\n      ...rest,\n    },\n    defaultTag: DEFAULT_CARD_TAG,\n  });\n});\n\nexport const Card = Object.assign(CardRoot, {\n  Content: CardContent,\n});\n","import React from 'react';\n\nexport const useBodyElement = () => {\n  const [body, setBody] = React.useState<HTMLElement | null>(null);\n\n  React.useEffect(() => {\n    setBody(document.body);\n  }, []);\n\n  return body;\n};\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport * as RadixDialog from '@radix-ui/react-dialog';\nimport { Card } from './Card';\n\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport { useBodyElement } from '../../hooks/useBody';\nimport { Size, Theme } from '../../types';\nimport { ThemeProvider } from '../../config/ThemeProvider';\n\nconst DEFAULT_DIALOG_TAG = 'div';\n\nexport interface DialogProps extends RadixDialog.DialogProps {\n  theme?: Theme;\n  dark?: boolean;\n  size?: Size;\n  container?: HTMLElement | null | undefined;\n}\n\nconst DialogRoot = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_DIALOG_TAG\n>(props: Props<TTag> & DialogProps, ref: React.Ref<TTag>) {\n  const {\n    className,\n    children,\n    open,\n    defaultOpen,\n    onOpenChange,\n    modal,\n    theme,\n    dark,\n    size,\n    container,\n    ...rest\n  } = props;\n  const config = useUniversalUIConfig();\n  const body = useBodyElement();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'relative max-w-lg w-full transition-none shadow-md data-[state=open]:animate-fade-in';\n    const configClasses = unwrapConfigClasses('dialog', config, props);\n    return [base, configClasses, className];\n  });\n\n  const overlayClassNames = useClassNames(() => {\n    const base = 'fixed  inset-0 bg-black/50';\n    const configClasses = unwrapConfigClasses('dialog_overlay', config, props);\n    return [base, configClasses];\n  });\n\n  const rootClassNames = useClassNames(() => {\n    const base = 'fixed z-[51] inset-0 grid p-size-x place-items-center';\n    const configClasses = unwrapConfigClasses('dialog_root', config, props);\n    return [base, configClasses];\n  });\n\n  return (\n    <RadixDialog.Root\n      open={open}\n      defaultOpen={defaultOpen}\n      onOpenChange={onOpenChange}\n      modal={modal}\n    >\n      <RadixDialog.Portal container={container ?? body}>\n        <ThemeProvider className={rootClassNames}>\n          <RadixDialog.Overlay className={overlayClassNames} />\n          <RadixDialog.Content asChild>\n            {/* @ts-ignore */}\n            <Card\n              {...rest}\n              className={classNames}\n              ref={ref}\n              theme={theme}\n              size={size}\n              dark={dark}\n              data-modal={modal}\n            >\n              {children}\n            </Card>\n          </RadixDialog.Content>\n        </ThemeProvider>\n      </RadixDialog.Portal>\n    </RadixDialog.Root>\n  );\n});\n\nconst DEFAULT_DIALOG_CONTENT_TAG = 'div';\n\nconst DialogContent = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_DIALOG_TAG\n>(props: Props<TTag>, ref: React.Ref<TTag>) {\n  const { className, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'pl-size-x pr-size-x pt-size-x pb-size-x';\n    const configClasses = unwrapConfigClasses('dialog.content', config, props);\n    return [base, configClasses, className];\n  });\n\n  return render({\n    // @ts-ignore\n    props: {\n      ref,\n      className: classNames,\n      ...rest,\n    },\n    defaultTag: DEFAULT_DIALOG_CONTENT_TAG,\n  });\n});\n\nconst DEFAULT_DIALOG_TITLE_TAG = 'h3';\n\nconst DialogTitle = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_DIALOG_CONTENT_TAG\n>(props: Props<TTag>, ref: React.Ref<TTag>) {\n  const { className, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'text-theme-base text-xl font-medium tracking-tight';\n    const configClasses = unwrapConfigClasses('dialog.title', config, props);\n\n    return [base, configClasses, className];\n  });\n\n  return (\n    <RadixDialog.Title asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          ...rest,\n        },\n        defaultTag: DEFAULT_DIALOG_TITLE_TAG,\n      })}\n    </RadixDialog.Title>\n  );\n});\n\nconst DEFAULT_DIALOG_DESCRIPTION_TAG = 'p';\n\nconst DialogDescription = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_DIALOG_CONTENT_TAG\n>(props: Props<TTag>, ref: React.Ref<TTag>) {\n  const { className, ...rest } = props;\n\n  const classNames = useClassNames(() => {\n    const base = 'text-theme-muted';\n    return [base, className];\n  });\n\n  return (\n    <RadixDialog.Description asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          ...rest,\n        },\n        defaultTag: DEFAULT_DIALOG_DESCRIPTION_TAG,\n      })}\n    </RadixDialog.Description>\n  );\n});\n\nexport const Dialog = Object.assign(DialogRoot, {\n  Root: DialogRoot,\n  Content: DialogContent,\n  Title: DialogTitle,\n  Description: DialogDescription,\n});\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport * as RadixPopover from '@radix-ui/react-popover';\n\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport { useBodyElement } from '../../hooks/useBody';\nimport { Size, Theme } from '../../types';\nimport { ThemeProvider } from '../../config/ThemeProvider';\n\nexport interface PopoverProps extends RadixPopover.PopoverProps {}\nconst PopoverRoot = ({ ...rest }: PopoverProps) => {\n  return <RadixPopover.Root {...rest} />;\n};\n\nconst DEFAULT_POPOVER_TRIGGER_TAG = 'div';\n\nexport interface PopoverTriggerProps extends RadixPopover.PopoverTriggerProps {}\n\nconst PopoverTrigger = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_POPOVER_TRIGGER_TAG\n>(props: Props<TTag> & PopoverProps, ref: React.Ref<TTag>) {\n  const { className, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'inline-block';\n    const configClasses = unwrapConfigClasses('popover.trigger', config, props);\n    return [base, configClasses, className];\n  });\n\n  return (\n    <RadixPopover.Trigger asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          ...rest,\n        },\n        defaultTag: DEFAULT_POPOVER_TRIGGER_TAG,\n      })}\n    </RadixPopover.Trigger>\n  );\n});\n\nexport interface PopoverContentProps extends RadixPopover.PopoverContentProps {\n  theme?: Theme;\n  dark?: boolean;\n  size?: Size;\n  arrowClassName?: string;\n  container?: HTMLElement | null | undefined;\n}\n\nconst PopoverContent = (props: PopoverContentProps) => {\n  const {\n    className,\n    sideOffset = 8,\n    theme,\n    size,\n    dark,\n    arrowClassName,\n    container,\n    ...rest\n  } = props;\n  const body = useBodyElement();\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'bg-theme-pure border border-theme-muted rounded text-theme-base shadow-sm z-[51]';\n    const sizeClasses = 'pl-size-x pr-size-x pb-size-x pt-size-x text-size';\n    const animationClasses =\n      'origin-[var(--radix-popover-content-transform-origin)] motion-safe:animate-scale-in motion-reduce:animate-fade-in';\n    const configClasses = unwrapConfigClasses('popover.content', config, props);\n    return [base, sizeClasses, animationClasses, configClasses, className];\n  });\n\n  const arrowClassNames = useClassNames(() => {\n    const base = 'fill-theme-muted';\n\n    const configClasses = unwrapConfigClasses(\n      'popover.content_arrow',\n      config,\n      props\n    );\n\n    return [base, configClasses, arrowClassName];\n  });\n\n  return (\n    <RadixPopover.Portal container={container ?? body}>\n      <ThemeProvider\n        {...rest}\n        sideOffset={sideOffset}\n        as={RadixPopover.Content}\n        theme={theme}\n        size={size}\n        dark={dark}\n        className={classNames}\n      >\n        {props.children}\n        {!arrowClassNames.includes('fill-transparent') && (\n          <RadixPopover.Arrow className={arrowClassNames} />\n        )}\n      </ThemeProvider>\n    </RadixPopover.Portal>\n  );\n};\n\nexport const Popover = Object.assign(PopoverRoot, {\n  Root: PopoverRoot,\n  Trigger: PopoverTrigger,\n  Content: PopoverContent,\n});\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport * as RadixTabs from '@radix-ui/react-tabs';\n\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\n\nexport interface TabsProps extends RadixTabs.TabsProps {}\nconst TabsRoot = ({ ...rest }: TabsProps) => {\n  return <RadixTabs.Root {...rest} />;\n};\n\nconst DEFAULT_TABS_LIST_TAG = 'div';\n\nexport interface TabsListProps extends RadixTabs.TabsListProps {}\n\nconst TabsList = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_TABS_LIST_TAG\n>(props: Props<TTag> & TabsProps, ref: React.Ref<TTag>) {\n  const { className, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'flex border-b border-theme-base';\n    const configClasses = unwrapConfigClasses('tabs.list', config, props);\n    return [base, configClasses, className];\n  });\n\n  return (\n    <RadixTabs.List asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          ...rest,\n        },\n        defaultTag: DEFAULT_TABS_LIST_TAG,\n      })}\n    </RadixTabs.List>\n  );\n});\n\nconst DEFAULT_TABS_TRIGGER_TAG = 'button';\n\nexport interface TabsTriggerProps extends RadixTabs.TabsTriggerProps {}\n\nconst TabsTrigger = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_TABS_TRIGGER_TAG\n>(props: Props<TTag> & TabsTriggerProps, ref: React.Ref<TTag>) {\n  const { className, value, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'inline-block px-size-x py-size-x text-size leading-size font-medium text-theme-muted group/tabs-trigger border-b-2 border-transparent';\n    const activeClasses =\n      'data-[state=active]:border-current data-[state=active]:text-theme-active';\n    const inactiveClasses = 'data-[state=inactive]:hover:text-theme-active';\n    const configClasses = unwrapConfigClasses('tabs.trigger', config, props);\n    return [base, activeClasses, inactiveClasses, configClasses, className];\n  });\n\n  return (\n    <RadixTabs.Trigger value={value} asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          ...rest,\n        },\n        defaultTag: DEFAULT_TABS_TRIGGER_TAG,\n      })}\n    </RadixTabs.Trigger>\n  );\n});\n\nconst DEFAULT_TABS_CONTENT_TAG = 'div';\n\nexport interface TabsContentProps extends RadixTabs.TabsContentProps {}\n\nconst TabsContent = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_TABS_CONTENT_TAG\n>(props: Props<TTag> & TabsContentProps, ref: React.Ref<TTag>) {\n  const { className, value, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'inline-block';\n    const configClasses = unwrapConfigClasses('tabs.content', config, props);\n    return [base, configClasses, className];\n  });\n\n  return (\n    <RadixTabs.Content value={value} asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          ...rest,\n        },\n        defaultTag: DEFAULT_TABS_CONTENT_TAG,\n      })}\n    </RadixTabs.Content>\n  );\n});\n\nexport const Tabs = Object.assign(TabsRoot, {\n  Root: TabsRoot,\n  List: TabsList,\n  Trigger: TabsTrigger,\n  Content: TabsContent,\n});\n","import React, { useMemo } from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport { Size,  TextStyleVariant, Theme } from '../../types';\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\n\nexport interface TextProps {\n  size?: Size;\n  theme?: Theme;\n  variant?: TextStyleVariant;\n  dark?: boolean;\n}\n\nconst DEFAULT_TEXT_TAG = 'p';\n\nexport const Text = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_TEXT_TAG\n>(props: Props<TTag> & TextProps, ref: React.Ref<TTag>) {\n  const { size, theme, variant = 'p', dark, className, ...rest } = props;\n\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'text-theme-base';\n\n    const styleVariants: Record<TextStyleVariant, string> = {\n      h1: `text-4xl   font-semibold tracking-tight`,\n      h2: `text-3xl   font-semibold tracking-tight`,\n      h3: `text-2xl   font-semibold tracking-tight`,\n      h4: `text-xl    font-medium   tracking-tight`,\n      h5: `text-base  font-semibold tracking-tight`,\n      h6: `text-sm    font-medium   tracking-normal `,\n      p: ` text-size  font-normal   tracking-normal leading-size`,\n      code: `font-mono border text-size bg-theme-pure border-theme-base px-1 py-0.5 rounded font-medium whitespace-nowrap leading-size`,\n      kbd: `\n        font-medium font-sans\n        text-size\n        bg-theme-base border-theme-base\n        border border-b-[2px]\n        inline-grid place-items-center\n        px-1 py-0.5\n        min-w-[1.5rem] min-h-[1.5rem]\n        w-fit\n        rounded\n        text-center leading-none`,\n    };\n\n    const configClasses = unwrapConfigClasses('text', config, {\n      ...props,\n      variant,\n    });\n\n    return [base, styleVariants[variant], configClasses, className];\n  });\n\n  const renderElement: React.ElementType = useMemo(() => {\n    if (props.as) return props.as;\n    if (variant === 'p') return 'p';\n    return variant || DEFAULT_TEXT_TAG;\n  }, [props.as, variant]);\n\n  return render({\n    // @ts-ignore\n    props: {\n      ref,\n      className: classNames,\n      'data-size': size,\n      'data-theme': theme,\n      'data-dark': dark,\n      ...rest,\n    },\n    defaultTag: renderElement,\n  });\n});\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport * as RadixTooltip from '@radix-ui/react-tooltip';\n\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport { useBodyElement } from '../../hooks/useBody';\nimport { Size, Theme } from '../../types';\nimport { ThemeProvider } from '../../config/ThemeProvider';\n\nexport interface TooltipProps extends RadixTooltip.TooltipProps {}\nconst TooltipRoot = ({ delayDuration = 150, ...rest }: TooltipProps) => {\n  return <RadixTooltip.Root {...rest} delayDuration={delayDuration} />;\n};\n\nconst DEFAULT_TOOLTIP_TRIGGER_TAG = 'span';\n\nexport interface TooltipTriggerProps extends RadixTooltip.TooltipTriggerProps {}\n\nconst TooltipTrigger = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_TOOLTIP_TRIGGER_TAG\n>(props: Props<TTag> & TooltipProps, ref: React.Ref<TTag>) {\n  const { className, ...rest } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'inline-block';\n    const configClasses = unwrapConfigClasses('tooltip.trigger', config, props);\n    return [base, configClasses, className];\n  });\n\n  return (\n    <RadixTooltip.Trigger asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          ...rest,\n        },\n        defaultTag: DEFAULT_TOOLTIP_TRIGGER_TAG,\n      })}\n    </RadixTooltip.Trigger>\n  );\n});\n\nexport interface TooltipContentProps extends RadixTooltip.TooltipContentProps {\n  theme?: Theme;\n  dark?: boolean;\n  size?: Size;\n  arrowClassName?: string;\n  container?: HTMLElement | null | undefined;\n}\n\nconst TooltipContent = (props: TooltipContentProps) => {\n  const {\n    className,\n    sideOffset = 8,\n    theme,\n    size,\n    dark,\n    arrowClassName,\n    container,\n    ...rest\n  } = props;\n  const body = useBodyElement();\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'bg-theme-base border border-theme-muted rounded text-theme-base shadow-sm z-[51]';\n    const sizeClasses = 'px-size-x py-size-qy text-size';\n    const animationClasses =\n      'origin-[var(--radix-tooltip-content-transform-origin)] motion-safe:animate-scale-in motion-reduce:animate-fade-in';\n    const configClasses = unwrapConfigClasses('tooltip.content', config, props);\n    return [base, sizeClasses, animationClasses, configClasses, className];\n  });\n\n  const arrowClassNames = useClassNames(() => {\n    const base = 'fill-transparent';\n\n    const configClasses = unwrapConfigClasses(\n      'tooltip.content_arrow',\n      config,\n      props\n    );\n\n    return [base, configClasses, arrowClassName];\n  });\n\n  return (\n    <RadixTooltip.Portal container={container ?? body}>\n      <ThemeProvider\n        {...rest}\n        sideOffset={sideOffset}\n        as={RadixTooltip.Content}\n        theme={theme}\n        size={size}\n        dark={dark}\n        className={classNames}\n      >\n        {props.children}\n        {!arrowClassNames.includes('fill-transparent') && (\n          <RadixTooltip.Arrow className={arrowClassNames} />\n        )}\n      </ThemeProvider>\n    </RadixTooltip.Portal>\n  );\n};\n\nexport const Tooltip = Object.assign(TooltipRoot, {\n  Root: TooltipRoot,\n  Trigger: TooltipTrigger,\n  Content: TooltipContent,\n});\n","// ! For internal use only, do not export from index.ts\n\nimport { GroupBorderOption, Variant } from '../../types';\n\nexport const getInputBaseCx = (options?: {\n  removeFocus?: boolean;\n  override?: (() => string) | string;\n  mounted?: boolean;\n}) => {\n  const base =\n    'font-medium tracking-tight rounded border disabled:opacity-75 disabled:cursor-not-allowed';\n  \n  const mountedStyles = options?.mounted\n    ? 'enabled:hover:transition-colors'\n    : '';\n\n  const focusStyles = options?.removeFocus\n    ? ''\n    : 'focus:outline-none ring-0 focus-within:relative transition-[ring] focus-within:z-20 focus:ring focus-within:ring focus:ring-theme-base/50 focus-within:ring-theme-base/50';\n\n  const override = options?.override;\n\n  let overrideStyles = '';\n\n  if (typeof override === 'function') {\n    overrideStyles = override();\n  } else if (typeof override === 'string') {\n    overrideStyles = override;\n  }\n\n  return [base, mountedStyles, focusStyles, overrideStyles].join(' ');\n};\n\nexport const getInputSizeCx = (options?: {\n  override?: (() => string) | string;\n}) => {\n  const base = 'pl-size-x pr-size-x pt-size-y pb-size-y text-size leading-size';\n\n  const override = options?.override;\n\n  let overrideStyles = '';\n\n  if (typeof override === 'function') {\n    overrideStyles = override();\n  } else if (typeof override === 'string') {\n    overrideStyles = override;\n  }\n\n  return [base, overrideStyles].join(' ');\n};\n\nexport const getInputVariantCx = (\n  variant: Variant,\n  options?: {\n    removeHover?: boolean;\n    override?: (variant: Variant) => string;\n  }\n) => {\n  const { removeHover, override } = options || {};\n\n  const INPUT_VARIANT_STYLES: Record<Variant, string> = {\n    solid: `\n      bg-theme-base\n      text-theme-base\n      placeholder:text-theme-muted\n      border-theme-muted group-data-[uui=true]/card:border-theme-base\n      ${removeHover ? '' : 'enabled:hover:bg-theme-active'}\n\n      `,\n    outline: `\n      bg-transparent\n      text-theme-base\n      placeholder:text-theme-muted\n      border-theme-base\n      ${removeHover ? '' : 'enabled:hover:bg-theme-active'}\n    `,\n    ghost: `\n      bg-transparent\n      text-theme-base hover:text-theme-active\n      placeholder:text-theme-muted\n      border-transparent\n      ${removeHover ? '' : 'enabled:hover:bg-theme-active'}\n    `,\n    inverted: `\n      bg-theme-inverted \n      text-theme-inverted \n      border-theme-inverted\n      ${\n        removeHover\n          ? ''\n          : 'enabled:hover:bg-theme-base enabled:hover:text-theme-active'\n      }\n      `,\n  };\n\n  const overrideStyles = override?.(variant) || '';\n\n  return [INPUT_VARIANT_STYLES[variant], overrideStyles].join(' ');\n};\n\nexport const getInputGroupItemCx = (options?: {\n  borderOption?: GroupBorderOption;\n}) => {\n  const base =\n    'shadow-none rounded-none focus:relative focus:z-10 first:rounded-l last:rounded-r ';\n\n  const borderOptions = {\n    left: 'border-r-0 last:border-r',\n    right: 'border-l-0 first:border-l',\n    both: '',\n    none: 'first:border-l last:border-r border-0',\n  };\n\n  return [base, borderOptions[options?.borderOption || 'both']].join(' ');\n};\n","import React from 'react';\n\ntype SvgProps = React.HTMLAttributes<HTMLOrSVGElement>;\n\nconst ICON_MAP = {\n  'chevron-down': (\n    <svg viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n      ></path>\n    </svg>\n  ),\n  check: (\n    <svg viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n      ></path>\n    </svg>\n  ),\n  selector: (\n    <svg viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n      ></path>\n    </svg>\n  ),\n};\n\nexport const Icon = ({\n  ...props\n}: SvgProps & {\n  name: keyof typeof ICON_MAP;\n}) => {\n  return React.cloneElement(ICON_MAP[props.name], props);\n};\n","import React, { forwardRef } from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames, useMounted } from '../../hooks/useClassNames';\nimport { Size, Theme } from '../../types';\nimport { unwrapConfigClasses } from '../../core';\nimport { getInputBaseCx } from './constants';\nimport * as RadixCheckbox from '@radix-ui/react-checkbox';\nimport { Icon } from '../icons/Icon';\n\nexport interface CheckboxProps\n  extends Omit<RadixCheckbox.CheckboxProps, 'children'> {\n  size?: Size;\n  theme?: Theme;\n  dark?: boolean;\n}\n\nconst CheckboxRoot = forwardRef(\n  (props: CheckboxProps, ref: React.Ref<HTMLButtonElement>) => {\n    const { size, theme, dark, className, ...rest } = props;\n    const config = useUniversalUIConfig();\n    const mounted = useMounted();\n    \n    const classNames = useClassNames(() => {\n      const base = getInputBaseCx({\n        override: 'bg-theme-pure border-theme-active',\n        mounted,\n      });\n\n      const sizeClass = 'w-[calc(var(--size-text)+var(--size-qx))] h-[calc(var(--size-text)+var(--size-qx))] flex-shrink-0';\n\n      const configClasses = unwrapConfigClasses('checkbox', config, props);\n\n      return [base, sizeClass, configClasses, className];\n    });\n\n    return (\n      <RadixCheckbox.Root\n        {...rest}\n        className={classNames}\n        ref={ref}\n        data-theme={theme}\n        data-dark={dark}\n        data-size={size}\n      >\n        <RadixCheckbox.Indicator>\n          <Icon name=\"check\" className=\"text-theme-base/80\" />\n        </RadixCheckbox.Indicator>\n      </RadixCheckbox.Root>\n    );\n  }\n);\n\nexport const Checkbox = Object.assign(CheckboxRoot, {});\n","// ! For internal use only, do not export from index.ts\n\nimport { createContext, useContext } from 'react';\nimport { GroupBorderOption, Variant } from '../../types';\n\nexport const InputGroupContext = createContext<{\n  variant?: Variant;\n  borderOption?: GroupBorderOption;\n} | null>(null);\n\nexport const useInputGroupContext = () => {\n  return useContext(InputGroupContext);\n};\n","'use client';\n// ! For internal use only, do not export from index.ts\n\nimport React, { forwardRef } from 'react';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { unwrapConfigClasses } from '../../core';\n\nexport interface InputIconProps {\n  type?: 'center' | 'leading' | 'trailing';\n}\n\nexport const InputIcon = forwardRef<\n  HTMLSpanElement,\n  InputIconProps & React.HTMLAttributes<HTMLSpanElement>\n>((props, ref) => {\n  const { children, className, type = 'center' } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'h-size-line aspect-square relative scale-75 text-theme-muted pointer-events-none select-none';\n\n    const positionClasses = {\n      center: '',\n      leading: 'relative -left-size-qx ',\n      trailing: 'relative -right-size-qx ',\n    };\n\n    const configClasses = unwrapConfigClasses('input-icon', config, props);\n\n    return [base, positionClasses[type], configClasses, className];\n  });\n\n  return (\n    <span className={classNames} aria-hidden=\"true\" ref={ref}>\n      {children}\n    </span>\n  );\n});\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport { useClassNames } from '../../hooks/useClassNames';\nimport { GroupBorderOption, Size, Theme, Variant } from '../../types';\nimport { InputGroupContext } from './InputGroupContext';\n\nexport interface InputGroupProps {\n  size?: Size;\n  theme?: Theme;\n  variant?: Variant;\n  dark?: boolean;\n  borderOption?: GroupBorderOption;\n}\n\nconst DEFAULT_INPUT_GROUP_TAG = 'div';\n\nconst InputGroup = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_INPUT_GROUP_TAG\n>(props: Props<TTag> & InputGroupProps, ref: React.Ref<TTag>) {\n  const {\n    size,\n    theme,\n    variant = 'solid',\n    dark,\n    className,\n    borderOption = 'right',\n    ...rest\n  } = props;\n\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base = 'inline-flex rounded';\n    const configClasses = unwrapConfigClasses('input-group', config, props);\n    return [base, configClasses, className];\n  });\n\n  return (\n    <InputGroupContext.Provider value={{ variant, borderOption }}>\n      {render({\n        // @ts-ignore\n        props: {\n          ref,\n          className: classNames,\n          'data-size': size,\n          'data-theme': theme,\n          'data-dark': dark,\n          ...rest,\n        },\n        defaultTag: DEFAULT_INPUT_GROUP_TAG,\n      })}\n    </InputGroupContext.Provider>\n  );\n});\n\nexport { InputGroup };\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames, useMounted } from '../../hooks/useClassNames';\nimport { Size, Theme, Variant } from '../../types';\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport {\n  getInputBaseCx,\n  getInputGroupItemCx,\n  getInputSizeCx,\n  getInputVariantCx,\n} from './constants';\nimport { useInputGroupContext } from './InputGroupContext';\nimport { InputIcon } from './InputIcon';\nimport { InputGroup } from './InputGroup';\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  size?: Size;\n  theme?: Theme;\n  variant?: Variant;\n  dark?: boolean;\n  icon?: React.ReactNode;\n  leadingIcon?: React.ReactNode;\n  trailingIcon?: React.ReactNode;\n}\n\nconst DEFAULT_BUTTON_TAG = 'button';\n\nconst ButtonRoot = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_BUTTON_TAG\n>(props: Props<TTag> & ButtonProps, ref: React.Ref<TTag>) {\n  const {\n    size,\n    theme,\n    variant,\n    dark,\n    className,\n    icon,\n    leadingIcon,\n    trailingIcon,\n    children,\n    ...rest\n  } = props;\n  const config = useUniversalUIConfig();\n  const inputGroupContext = useInputGroupContext();\n  \n  const mounted = useMounted();\n  const classNames = useClassNames(() => {\n    const base = getInputBaseCx({\n      override: 'select-none inline-flex items-center justify-center',\n      mounted,\n    });\n\n    const sizeClass = getInputSizeCx({\n      override: () => {\n        if (icon) {\n          return 'pl-size-y pr-size-y';\n        }\n        return '';\n      },\n    });\n\n    const groupVariantClass = inputGroupContext?.variant;\n\n    const variantClass = getInputVariantCx(\n      variant || groupVariantClass || 'solid',\n      {\n        removeHover: props.disabled,\n      }\n    );\n\n    const inGroup = inputGroupContext !== null;\n    const groupClasses =\n      inGroup &&\n      getInputGroupItemCx({ borderOption: inputGroupContext?.borderOption });\n\n    const configClasses = unwrapConfigClasses('button', config, {\n      ...props,\n      inGroup,\n    });\n\n    return [\n      base,\n      sizeClass,\n      variantClass,\n      groupClasses,\n      configClasses,\n      className,\n    ];\n  });\n\n  return render({\n    // @ts-ignore\n    props: {\n      ref,\n      className: classNames,\n      'data-size': size,\n      'data-theme': theme,\n      'data-dark': dark,\n      children: (\n        <>\n          {leadingIcon && <InputIcon type=\"leading\">{leadingIcon}</InputIcon>}\n          {icon ? <span className=\"sr-only\">{children}</span> : children}\n          {icon && <InputIcon type=\"center\">{icon}</InputIcon>}\n          {trailingIcon && (\n            <InputIcon type=\"trailing\">{trailingIcon}</InputIcon>\n          )}\n        </>\n      ),\n      ...rest,\n    },\n    defaultTag: DEFAULT_BUTTON_TAG,\n  });\n});\n\nexport const Button = Object.assign(ButtonRoot, {\n  Group: InputGroup,\n});\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames, useMounted } from '../../hooks/useClassNames';\nimport { Size, Theme, Variant } from '../../types';\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport {\n  getInputBaseCx,\n  getInputGroupItemCx,\n  getInputSizeCx,\n  getInputVariantCx,\n} from './constants';\nimport { useInputGroupContext } from './InputGroupContext';\nimport { InputIcon } from './InputIcon';\n\nexport interface InputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  size?: Size;\n  theme?: Theme;\n  variant?: Variant;\n  dark?: boolean;\n  leadingIcon?: React.ReactNode;\n  trailingIcon?: React.ReactNode;\n  inputRef?: React.Ref<HTMLInputElement>;\n}\n\nconst DEFAULT_INPUT_TAG = 'div';\nconst INPUT_TAG = 'input';\n\nexport const Input = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof INPUT_TAG\n>(props: Omit<Props<TTag>, 'size'> & InputProps, ref: React.Ref<TTag>) {\n  const {\n    size,\n    theme,\n    variant,\n    dark,\n    className,\n    leadingIcon,\n    trailingIcon,\n    inputRef,\n    ...rest\n  } = props;\n  const config = useUniversalUIConfig();\n  const inputGroupContext = useInputGroupContext();\n  const mounted = useMounted();\n\n  const classNames = useClassNames(() => {\n    const base = getInputBaseCx({\n      override:\n        'font-normal placeholder:opacity-50 truncate w-max flex items-center',\n      mounted,\n    });\n\n    const sizeClass = getInputSizeCx();\n\n    const groupVariantClass = inputGroupContext?.variant;\n    const variantClass = getInputVariantCx(\n      variant || groupVariantClass || 'solid',\n      {\n        removeHover: true,\n        override: v => {\n          switch (v) {\n            case 'solid':\n              return 'bg-theme-pure border-theme-base';\n            default:\n              return '';\n          }\n        },\n      }\n    );\n\n    const inGroup = inputGroupContext !== null;\n    const groupClasses =\n      inGroup &&\n      getInputGroupItemCx({ borderOption: inputGroupContext?.borderOption });\n\n    const configClasses = unwrapConfigClasses('input', config, {\n      ...props,\n      inGroup,\n    });\n\n    return [\n      base,\n      sizeClass,\n      variantClass,\n      groupClasses,\n      configClasses,\n      className,\n    ];\n  });\n\n  const inputClassNames = useClassNames(() => {\n    const base =\n      'bg-transparent focus:outline-none placeholder:text-theme-muted truncate placeholder:opacity-50 w-full disabled:opacity-50 disabled:cursor-not-allowed';\n\n    const configClasses = unwrapConfigClasses('input_inner', config, {\n      ...props,\n      inGroup: inputGroupContext !== null,\n    });\n\n    return [base, configClasses];\n  });\n\n  return render({\n    props: {\n      ref,\n      className: classNames,\n      'data-size': size,\n      'data-theme': theme,\n      'data-dark': dark,\n      children: (\n        <>\n          {leadingIcon && <InputIcon type=\"leading\">{leadingIcon}</InputIcon>}\n          <input {...rest} className={inputClassNames} ref={inputRef} />\n          {trailingIcon && (\n            <InputIcon type=\"trailing\">{trailingIcon}</InputIcon>\n          )}\n        </>\n      ),\n    },\n    defaultTag: DEFAULT_INPUT_TAG,\n  });\n});\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames, useMounted } from '../../hooks/useClassNames';\nimport { Size, Theme, Variant } from '../../types';\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport {\n  getInputBaseCx,\n  getInputGroupItemCx,\n  getInputSizeCx,\n  getInputVariantCx,\n} from './constants';\nimport { useInputGroupContext } from './InputGroupContext';\nimport * as RadixSelect from '@radix-ui/react-select';\nimport { InputIcon } from './InputIcon';\nimport { ThemeProvider } from '../../config/ThemeProvider';\n\nimport { Icon } from '../icons/Icon';\nimport { useBodyElement } from '../../hooks/useBody';\n\nconst SelectContext = React.createContext<{\n  size?: Size;\n  theme?: Theme;\n  dark?: boolean;\n}>({\n  size: 'md',\n  theme: 'neutral',\n  dark: false,\n});\n\nexport interface SelectRootProps extends RadixSelect.SelectProps {\n  size?: Size;\n  theme?: Theme;\n  dark?: boolean;\n}\n\nconst SelectRoot = (props: SelectRootProps) => {\n  const { size, theme, dark, children, ...rest } = props;\n\n  return (\n    <RadixSelect.Root {...rest}>\n      <SelectContext.Provider value={{ size, theme, dark }}>\n        {children}\n      </SelectContext.Provider>\n    </RadixSelect.Root>\n  );\n};\n\nconst DEFAULT_SELECT_TRIGGER_TAG = 'button';\n\nexport interface SelectTriggerProps extends RadixSelect.SelectValueProps {\n  leadingIcon?: React.ReactNode;\n  trailingIcon?: React.ReactNode;\n  variant?: Variant;\n}\n\nconst SelectTrigger = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_SELECT_TRIGGER_TAG\n>(props: Props<TTag> & SelectTriggerProps, ref: React.Ref<TTag>) {\n  const {\n    variant,\n    className,\n    children,\n    leadingIcon,\n    trailingIcon = <Icon name=\"selector\" />,\n    ...rest\n  } = props;\n\n  const config = useUniversalUIConfig();\n  const inputGroupContext = useInputGroupContext();\n  const { size, theme, dark } = React.useContext(SelectContext);\n\n  const mounted = useMounted();\n\n  const classNames = useClassNames(() => {\n    const base = getInputBaseCx({\n      override: 'hover:bg-theme-base group/select-trigger',\n      mounted,\n    });\n\n    const sizeClass = getInputSizeCx();\n\n    const groupVariantClass = inputGroupContext?.variant;\n    const variantClass = getInputVariantCx(\n      variant || groupVariantClass || 'solid',\n      {\n        override: _ => 'bg-theme-pure',\n      }\n    );\n\n    const inGroup = inputGroupContext !== null;\n    const groupClasses =\n      inGroup &&\n      getInputGroupItemCx({ borderOption: inputGroupContext?.borderOption });\n\n    const configClasses = unwrapConfigClasses('select.trigger', config, {\n      ...props,\n      size,\n      theme,\n      variant,\n      inGroup,\n    });\n\n    return [\n      base,\n      sizeClass,\n      variantClass,\n      groupClasses,\n      configClasses,\n      className,\n    ];\n  });\n\n  return (\n    <RadixSelect.Trigger asChild>\n      {render({\n        // @ts-ignore\n        props: {\n          'data-size': size,\n          'data-theme': theme,\n          'data-dark': dark,\n          className: classNames,\n          ref,\n          children: (\n            <div className=\"flex items-center justify-stretch min-w-[15ch]\">\n              {leadingIcon && (\n                <RadixSelect.Icon asChild>\n                  <InputIcon type=\"leading\">{leadingIcon}</InputIcon>\n                </RadixSelect.Icon>\n              )}\n              <RadixSelect.Value\n                placeholder={rest.placeholder || 'Select an option...'}\n                className=\"inline flex-1\"\n              >\n                {children}\n              </RadixSelect.Value>\n              {trailingIcon && (\n                <RadixSelect.Icon asChild>\n                  <InputIcon type=\"trailing\" className=\"ml-auto\">\n                    {trailingIcon}\n                  </InputIcon>\n                </RadixSelect.Icon>\n              )}\n            </div>\n          ),\n          ...rest,\n        },\n        defaultTag: DEFAULT_SELECT_TRIGGER_TAG,\n      })}\n    </RadixSelect.Trigger>\n  );\n});\n\nexport interface SelectPanelProps extends RadixSelect.SelectPortalProps {\n  children: React.ReactNode;\n}\n\nconst DEFAULT_SELECT_PANEL_TAG = 'div';\n\nconst SelectPanel = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_SELECT_PANEL_TAG\n>(props: Props<TTag> & SelectPanelProps, ref: React.Ref<TTag>) {\n  const { className, children, as: asElement, ...rest } = props;\n\n  const config = useUniversalUIConfig();\n  const { size, theme, dark } = React.useContext(SelectContext);\n\n  const body = useBodyElement();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'bg-theme-pure px-size-qx py-size-qx rounded border border-theme-base shadow-md z-[51]';\n    const configClasses = unwrapConfigClasses('select.panel', config, props);\n\n    return [base, configClasses, className];\n  });\n\n  return (\n    <RadixSelect.Portal container={body}>\n      {/* @ts-ignore */}\n      <ThemeProvider\n        theme={theme}\n        dark={dark}\n        size={size}\n        ref={ref}\n        // @ts-ignore\n        as={asElement || DEFAULT_SELECT_PANEL_TAG}\n        {...rest}\n      >\n        <RadixSelect.Content className={classNames}>\n          <RadixSelect.ScrollUpButton className=\"grid place-items-center\">\n            <InputIcon type=\"center\">\n              <Icon name=\"chevron-down\" className=\"h-size-line rotate-180\" />\n            </InputIcon>\n          </RadixSelect.ScrollUpButton>\n          <RadixSelect.Viewport>{children}</RadixSelect.Viewport>\n          <RadixSelect.ScrollDownButton className=\"grid place-items-center\">\n            <InputIcon type=\"center\">\n              <Icon name=\"chevron-down\" className=\"h-size-line\" />\n            </InputIcon>\n          </RadixSelect.ScrollDownButton>\n        </RadixSelect.Content>\n      </ThemeProvider>\n    </RadixSelect.Portal>\n  );\n});\n\nexport interface SelectItemProps extends RadixSelect.SelectItemProps {\n  theme?: Theme;\n  leadingIcon?: React.ReactNode;\n  trailingIcon?: React.ReactNode;\n  textClassName?: string;\n}\n\nconst DEFAULT_SELECT_ITEM_TAG = 'button';\n\nconst SelectItem = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof DEFAULT_SELECT_ITEM_TAG\n>(props: Props<TTag> & SelectItemProps, ref: React.Ref<TTag>) {\n  const {\n    className,\n    children,\n    value,\n    theme,\n    leadingIcon,\n    trailingIcon = <Icon name=\"check\" />,\n    textClassName,\n    ...rest\n  } = props;\n  const config = useUniversalUIConfig();\n\n  const classNames = useClassNames(() => {\n    const base =\n      'flex items-center rounded w-full text-left border border-transparent group/select-item data-[disabled]:opacity-50 data-[disabled]:cursor-not-allowed';\n    const focusClasses =\n      'focus:bg-theme-base focus:outline-none data-[state=checked]:bg-theme-active';\n    const sizeClass = getInputSizeCx({\n      override: 'pt-size-hy pb-size-hy',\n    });\n\n    const configClasses = unwrapConfigClasses('select.item', config, props);\n\n    return [base, focusClasses, sizeClass, configClasses, className];\n  });\n\n  const textClassNames = useClassNames(() => {\n    const base =\n      'text-theme-base group-data-[state=closed]/select-trigger:text-theme-base group-data-[state=checked]/select-item:font-medium';\n\n    const configClasses = unwrapConfigClasses(\n      'select.item_text',\n      config,\n      props\n    );\n\n    return [base, configClasses, textClassName];\n  });\n\n  return (\n    <RadixSelect.Item {...rest} value={value} asChild>\n      {render({\n        props: {\n          className: classNames,\n          'data-theme': theme,\n          children: (\n            <>\n              {leadingIcon && (\n                <RadixSelect.ItemIndicator asChild>\n                  <InputIcon type=\"leading\">{leadingIcon}</InputIcon>\n                </RadixSelect.ItemIndicator>\n              )}\n              <RadixSelect.ItemText asChild>\n                <span className={textClassNames}>{children}</span>\n              </RadixSelect.ItemText>\n              {trailingIcon && (\n                <RadixSelect.ItemIndicator asChild>\n                  <InputIcon type=\"trailing\" className=\"ml-auto\">\n                    {trailingIcon}\n                  </InputIcon>\n                </RadixSelect.ItemIndicator>\n              )}\n            </>\n          ),\n          ref,\n        },\n        defaultTag: DEFAULT_SELECT_ITEM_TAG,\n      })}\n    </RadixSelect.Item>\n  );\n});\n\nexport const Select = Object.assign(SelectRoot, {\n  Trigger: SelectTrigger,\n  Panel: SelectPanel,\n  Item: SelectItem,\n});\n","import React from 'react';\nimport { useUniversalUIConfig } from '../../config/UniversalUIConfigContext';\nimport { useClassNames, useMounted } from '../../hooks/useClassNames';\nimport { Size, Theme, Variant } from '../../types';\nimport {\n  forwardRefWithAs,\n  Props,\n  render,\n  unwrapConfigClasses,\n} from '../../core';\nimport { getInputBaseCx, getInputSizeCx, getInputVariantCx } from './constants';\nimport { InputIcon } from './InputIcon';\n\nexport interface TextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'size'> {\n  size?: Size;\n  theme?: Theme;\n  variant?: Variant;\n  dark?: boolean;\n  leadingIcon?: React.ReactNode;\n  trailingIcon?: React.ReactNode;\n  textareaRef?: React.Ref<HTMLTextAreaElement>;\n}\n\nconst DEFAULT_TEXTAREA_TAG = 'div';\nconst TEXTAREA_TAG = 'textarea';\n\nexport const TextArea = forwardRefWithAs(function<\n  TTag extends React.ElementType = typeof TEXTAREA_TAG\n>(props: Omit<Props<TTag>, 'size'> & TextAreaProps, ref: React.Ref<TTag>) {\n  const {\n    size,\n    theme,\n    variant,\n    dark,\n    className,\n    leadingIcon,\n    trailingIcon,\n    textareaRef: textareaRef,\n    ...rest\n  } = props;\n  const config = useUniversalUIConfig();\n  \n  const mounted = useMounted();\n  const classNames = useClassNames(() => {\n    const base = getInputBaseCx({\n      override: 'font-normal placeholder:opacity-50 truncate w-max flex ',\n      mounted\n    });\n\n    const sizeClass = getInputSizeCx({\n      override: 'pl-0 pr-0 pt-0 pb-0',\n    });\n\n    // const groupVariantClass = inputGroupContext?.variant;\n    const variantClass = getInputVariantCx(variant || 'solid', {\n      removeHover: true,\n      override: v => {\n        switch (v) {\n          case 'solid':\n            return 'bg-theme-pure border-theme-base';\n          default:\n            return '';\n        }\n      },\n    });\n\n    // const inGroup = inputGroupContext !== null;\n    // const groupClasses =\n    //   inGroup &&\n    //   getInputGroupItemCx({ borderOption: inputGroupContext?.borderOption });\n\n    const configClasses = unwrapConfigClasses('input', config, {\n      ...props,\n      // inGroup,\n    });\n\n    return [\n      base,\n      sizeClass,\n      variantClass,\n      // groupClasses,\n      configClasses,\n      className,\n    ];\n  });\n\n  const textareaClassNames = useClassNames(() => {\n    const base =\n      'bg-transparent focus:outline-none placeholder:text-theme-muted truncate placeholder:opacity-50 w-full disabled:opacity-50 disabled:cursor-not-allowed';\n\n    const sizeClasses = ` ${!!leadingIcon ? '' : 'pl-size-x'} ${\n      !!trailingIcon ? '' : 'pr-size-x'\n    } pt-size-y pb-size-y `;\n\n    const configClasses = unwrapConfigClasses('input_inner', config, {\n      ...props,\n      // inGroup: inputGroupContext !== null,\n    });\n\n    return [base, sizeClasses, configClasses];\n  });\n\n  return render({\n    props: {\n      ref,\n      className: classNames,\n      'data-size': size,\n      'data-theme': theme,\n      'data-dark': dark,\n      children: (\n        <>\n          {leadingIcon && (\n            <InputIcon\n              className=\"ml-size-x mt-size-y -left-size-hx\"\n              type=\"leading\"\n            >\n              {leadingIcon}\n            </InputIcon>\n          )}\n          <textarea\n            {...rest}\n            className={textareaClassNames}\n            ref={textareaRef}\n          />\n          {trailingIcon && (\n            <InputIcon type=\"trailing\"\n              className=\"mr-size-x mt-size-y -right-size-hx\"\n            >{trailingIcon}</InputIcon>\n          )}\n        </>\n      ),\n    },\n    defaultTag: DEFAULT_TEXTAREA_TAG,\n  });\n});\n"],"names":["forwardRefWithAs","component","Object","assign","React","forwardRef","displayName","name","render","props","as","Component","defaultTag","rest","createElement","isSSR","window","document","documentElement","unwrapConfigClasses","context","classes","components","ThemeProvider","ref","prefersDarkMode","stored","setStored","client","theme","size","dark","inverted","enabled","values","mediaQueryLists","map","q","matchMedia","value","useState","getValue","index","findIndex","mql","matches","setValue","useEffect","handler","forEach","addEventListener","removeEventListener","usePrefersDarkMode","setClient","useClient","isDark","body","dataset","_document$body$datase","includes","data-theme","data-dark","data-size","UniversalUIConfigContext","createContext","ssr","useUniversalUIConfig","useContext","useClassNames","fn","cx","useMounted","mounted","setMounted","SPACING_CLASSES","twMerge","extendTailwindMerge","classGroups","font-size","text","padding-left","pl","padding-right","pr","pt","pb","px","py","padding","p","margin-left","ml","margin-right","mr","margin-top","mt","margin-bottom","mb","margin-x","mx","margin-y","my","margin","m","text-color","leading","Array","from","filter","Boolean","join","replace","trim","Card","className","config","data-uui","Content","useBodyElement","setBody","DialogRoot","children","open","defaultOpen","onOpenChange","modal","container","classNames","overlayClassNames","rootClassNames","RadixDialog","asChild","Dialog","Root","Title","Description","PopoverRoot","RadixPopover","Popover","Trigger","sideOffset","arrowClassName","arrowClassNames","TabsRoot","RadixTabs","Tabs","List","Text","variant","configClasses","h1","h2","h3","h4","h5","h6","code","kbd","renderElement","useMemo","TooltipRoot","delayDuration","RadixTooltip","Tooltip","getInputBaseCx","options","mountedStyles","focusStyles","removeFocus","override","overrideStyles","getInputSizeCx","getInputVariantCx","removeHover","INPUT_VARIANT_STYLES","solid","outline","ghost","getInputGroupItemCx","left","right","both","none","borderOption","ICON_MAP","chevron-down","viewBox","fill","xmlns","d","fillRule","clipRule","check","selector","Icon","cloneElement","CheckboxRoot","RadixCheckbox","Checkbox","InputGroupContext","useInputGroupContext","InputIcon","type","center","trailing","InputGroup","Provider","Button","icon","leadingIcon","trailingIcon","inputGroupContext","base","sizeClass","variantClass","disabled","inGroup","Group","Input","inputRef","v","inputClassNames","SelectContext","SelectRoot","RadixSelect","SelectTrigger","_","placeholder","SelectPanel","asElement","SelectItem","textClassName","textClassNames","Select","Panel","Item","TextArea","textareaRef","textareaClassNames","setV","providers","_config$providers","_config$providers2","tooltip"],"mappings":"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"}